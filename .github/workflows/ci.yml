name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      deployment_target:
        description: 'Deployment target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip test execution (emergency deployments only)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  REGISTRY_USER: ${{ github.actor }}
  REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

jobs:
  # ===== CHANGE DETECTION & PLANNING =====
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      e2e-changed: ${{ steps.changes.outputs.e2e }}
      docker-changed: ${{ steps.changes.outputs.docker }}
      docs-changed: ${{ steps.changes.outputs.docs }}
      deployment-required: ${{ steps.deployment.outputs.required }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend:
              - 'services/**'
              - '.github/workflows/backend-tests.yml'
              - '.github/workflows/ci.yml'
            frontend:
              - 'frontend/**'
              - '.github/workflows/frontend-tests.yml'
              - '.github/workflows/ci.yml'
            e2e:
              - 'e2e-tests/**'
              - 'docker-compose.e2e.yml'
              - '.github/workflows/e2e-tests.yml'
            docker:
              - '**/Dockerfile'
              - 'docker-compose*.yml'
              - '.dockerignore'
            docs:
              - '**.md'
              - 'docs/**'

      - name: Determine deployment requirements
        id: deployment
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "required=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/main" ] && [ "${{ github.event_name }}" = "push" ]; then
            echo "required=true" >> $GITHUB_OUTPUT
          else
            echo "required=false" >> $GITHUB_OUTPUT
          fi

  # ===== LINTING & STATIC ANALYSIS =====
  lint-and-format:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: |
      needs.detect-changes.outputs.backend-changed == 'true' ||
      needs.detect-changes.outputs.frontend-changed == 'true'
    
    strategy:
      matrix:
        component: []
        include:
          - component: backend
            condition: ${{ needs.detect-changes.outputs.backend-changed == 'true' }}
          - component: frontend  
            condition: ${{ needs.detect-changes.outputs.frontend-changed == 'true' }}
    
    steps:
      - name: Checkout code
        if: matrix.condition
        uses: actions/checkout@v4

      - name: Set up Node.js (Frontend)
        if: matrix.component == 'frontend' && matrix.condition
        uses: actions/setup-node@v5
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Set up JDK (Backend)
        if: matrix.component == 'backend' && matrix.condition
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'

      - name: Lint Frontend
        if: matrix.component == 'frontend' && matrix.condition
        run: |
          cd frontend
          npm ci --prefer-offline --no-audit
          npm run lint:check

      - name: TypeScript Check
        if: matrix.component == 'frontend' && matrix.condition
        run: |
          cd frontend
          npx tsc --noEmit

      - name: Check Backend Format
        if: matrix.component == 'backend' && matrix.condition
        run: |
          # Check if all services follow Kotlin/Java formatting standards
          find services -name "*.kt" -o -name "*.java" | xargs grep -l "class " | head -5

  # ===== PARALLEL TEST EXECUTION =====
  backend-tests:
    needs: [detect-changes, lint-and-format]
    if: |
      needs.detect-changes.outputs.backend-changed == 'true' &&
      github.event.inputs.skip_tests != 'true'
    uses: ./.github/workflows/backend-tests.yml
    secrets: inherit

  frontend-tests:
    needs: [detect-changes, lint-and-format]
    if: |
      needs.detect-changes.outputs.frontend-changed == 'true' &&
      github.event.inputs.skip_tests != 'true'
    uses: ./.github/workflows/frontend-tests.yml
    secrets: inherit

  security-scans:
    needs: detect-changes
    if: |
      (needs.detect-changes.outputs.backend-changed == 'true' ||
       needs.detect-changes.outputs.frontend-changed == 'true') &&
      github.event.inputs.skip_tests != 'true'
    uses: ./.github/workflows/security.yml
    secrets: inherit

  # ===== BUILD & PACKAGE =====
  build-backend:
    needs: [detect-changes, backend-tests]
    if: |
      always() &&
      needs.detect-changes.outputs.backend-changed == 'true' &&
      (needs.backend-tests.result == 'success' || needs.backend-tests.result == 'skipped')
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service: [
          focushive-backend,
          identity-service,
          music-service,
          notification-service,
          chat-service,
          analytics-service,
          forum-service,
          buddy-service,
          api-gateway
        ]
    
    outputs:
      image-tags: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build JAR
        run: |
          cd services/${{ matrix.service }}
          chmod +x ./gradlew
          ./gradlew build -x test --no-daemon

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/focushive-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: services/${{ matrix.service }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.service }}
          cache-to: type=gha,mode=max,scope=${{ matrix.service }}

  build-frontend:
    needs: [detect-changes, frontend-tests]
    if: |
      always() &&
      needs.detect-changes.outputs.frontend-changed == 'true' &&
      (needs.frontend-tests.result == 'success' || needs.frontend-tests.result == 'skipped')
    runs-on: ubuntu-latest
    
    outputs:
      image-tags: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js 20
        uses: actions/setup-node@v5
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies and build
        run: |
          cd frontend
          npm ci --prefer-offline --no-audit
          npm run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/focushive-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: frontend
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=frontend
          cache-to: type=gha,mode=max,scope=frontend

  # ===== E2E TESTS (POST-BUILD) =====
  e2e-tests:
    needs: [detect-changes, build-backend, build-frontend]
    if: |
      always() &&
      (needs.detect-changes.outputs.e2e-changed == 'true' ||
       needs.detect-changes.outputs.backend-changed == 'true' ||
       needs.detect-changes.outputs.frontend-changed == 'true') &&
      (needs.build-backend.result == 'success' || needs.build-backend.result == 'skipped') &&
      (needs.build-frontend.result == 'success' || needs.build-frontend.result == 'skipped') &&
      github.event.inputs.skip_tests != 'true'
    uses: ./.github/workflows/e2e-tests.yml
    secrets: inherit

  # ===== DEPLOYMENT =====
  deploy-staging:
    needs: [
      detect-changes,
      backend-tests,
      frontend-tests,
      security-scans,
      build-backend,
      build-frontend,
      e2e-tests
    ]
    if: |
      always() &&
      needs.detect-changes.outputs.deployment-required == 'true' &&
      (needs.backend-tests.result == 'success' || needs.backend-tests.result == 'skipped') &&
      (needs.frontend-tests.result == 'success' || needs.frontend-tests.result == 'skipped') &&
      (needs.security-scans.result == 'success' || needs.security-scans.result == 'skipped') &&
      (needs.build-backend.result == 'success' || needs.build-backend.result == 'skipped') &&
      (needs.build-frontend.result == 'success' || needs.build-frontend.result == 'skipped') &&
      (needs.e2e-tests.result == 'success' || needs.e2e-tests.result == 'skipped' || github.event.inputs.skip_tests == 'true')
    runs-on: ubuntu-latest
    environment: 
      name: staging
      url: https://staging.focushive.app
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl for staging
        run: |
          echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          kubectl config current-context

      - name: Deploy to staging
        run: |
          export KUBECONFIG=kubeconfig
          
          # Update image tags in deployment manifests
          BACKEND_TAG="${{ needs.build-backend.outputs.image-tags }}"
          FRONTEND_TAG="${{ needs.build-frontend.outputs.image-tags }}"
          
          # Deploy all services
          for service in focushive-backend identity-service music-service notification-service chat-service analytics-service forum-service buddy-service api-gateway; do
            if [ -f "k8s/staging/$service-deployment.yaml" ]; then
              sed -i "s|IMAGE_TAG|$BACKEND_TAG|g" "k8s/staging/$service-deployment.yaml"
              kubectl apply -f "k8s/staging/$service-deployment.yaml"
            fi
          done
          
          # Deploy frontend
          if [ -f "k8s/staging/frontend-deployment.yaml" ]; then
            sed -i "s|IMAGE_TAG|$FRONTEND_TAG|g" "k8s/staging/frontend-deployment.yaml"
            kubectl apply -f "k8s/staging/frontend-deployment.yaml"
          fi
          
          # Wait for rollout to complete
          kubectl rollout status deployment/focushive-backend -n staging --timeout=300s
          kubectl rollout status deployment/focushive-frontend -n staging --timeout=300s

      - name: Run smoke tests against staging
        run: |
          # Wait for services to be ready
          sleep 30
          
          # Basic health checks
          curl -f https://staging.focushive.app/health || exit 1
          curl -f https://staging.focushive.app/api/health || exit 1
          
          echo "✅ Staging deployment successful and health checks passed"

      - name: Notify deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}' === 'success' ? '✅ Success' : '❌ Failed';
            const deployment = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id,
              state: '${{ job.status }}' === 'success' ? 'success' : 'failure',
              description: `Staging deployment ${status.toLowerCase()}`,
              environment_url: 'https://staging.focushive.app'
            };
            
            if (deployment.deployment_id) {
              await github.rest.repos.createDeploymentStatus(deployment);
            }

  deploy-production:
    needs: [deploy-staging]
    if: |
      github.event_name == 'workflow_dispatch' &&
      github.event.inputs.deployment_target == 'production' &&
      needs.deploy-staging.result == 'success'
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://focushive.app
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Manual approval required
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ github.actor }}
          minimum-approvals: 1
          issue-title: "Production Deployment Approval Required"
          issue-body: |
            Please review the staging deployment and approve production deployment.
            
            **Staging URL**: https://staging.focushive.app
            **Production URL**: https://focushive.app
            **Commit**: ${{ github.sha }}
            **Triggered by**: ${{ github.actor }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl for production
        run: |
          echo "${{ secrets.PRODUCTION_KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          kubectl config current-context

      - name: Deploy to production with blue-green strategy
        run: |
          export KUBECONFIG=kubeconfig
          
          # Implement blue-green deployment strategy
          ./scripts/blue-green-deploy.sh production

      - name: Run production health checks
        run: |
          sleep 60
          
          # Comprehensive health checks
          curl -f https://focushive.app/health || exit 1
          curl -f https://focushive.app/api/health || exit 1
          
          # Check all service endpoints
          for service in identity music notification chat analytics forum buddy; do
            curl -f https://focushive.app/api/$service/health || exit 1
          done
          
          echo "✅ Production deployment successful and all services healthy"

  # ===== STATUS REPORTING =====
  status-check:
    needs: [
      detect-changes,
      backend-tests,
      frontend-tests,
      security-scans,
      e2e-tests,
      deploy-staging,
      deploy-production
    ]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Generate pipeline status
        run: |
          echo "# CI/CD Pipeline Status Report" > pipeline-status.md
          echo "" >> pipeline-status.md
          echo "**Trigger**: ${{ github.event_name }}" >> pipeline-status.md
          echo "**Branch**: ${{ github.ref_name }}" >> pipeline-status.md
          echo "**Commit**: ${{ github.sha }}" >> pipeline-status.md
          echo "**Actor**: ${{ github.actor }}" >> pipeline-status.md
          echo "" >> pipeline-status.md
          
          echo "## Changes Detected" >> pipeline-status.md
          echo "- Backend: ${{ needs.detect-changes.outputs.backend-changed }}" >> pipeline-status.md
          echo "- Frontend: ${{ needs.detect-changes.outputs.frontend-changed }}" >> pipeline-status.md
          echo "- E2E: ${{ needs.detect-changes.outputs.e2e-changed }}" >> pipeline-status.md
          echo "- Security: ${{ needs.detect-changes.outputs.docker-changed }}" >> pipeline-status.md
          echo "" >> pipeline-status.md
          
          echo "## Pipeline Results" >> pipeline-status.md
          echo "- Backend Tests: ${{ needs.backend-tests.result || 'skipped' }}" >> pipeline-status.md
          echo "- Frontend Tests: ${{ needs.frontend-tests.result || 'skipped' }}" >> pipeline-status.md
          echo "- Security Scans: ${{ needs.security-scans.result || 'skipped' }}" >> pipeline-status.md
          echo "- E2E Tests: ${{ needs.e2e-tests.result || 'skipped' }}" >> pipeline-status.md
          echo "- Staging Deploy: ${{ needs.deploy-staging.result || 'skipped' }}" >> pipeline-status.md
          echo "- Production Deploy: ${{ needs.deploy-production.result || 'skipped' }}" >> pipeline-status.md
          
          cat pipeline-status.md

      - name: Upload pipeline status
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-status-report
          path: pipeline-status.md
          retention-days: 30

      - name: Update commit status
        uses: actions/github-script@v7
        with:
          script: |
            const allJobsSuccessful = [
              '${{ needs.backend-tests.result }}',
              '${{ needs.frontend-tests.result }}',
              '${{ needs.security-scans.result }}',
              '${{ needs.e2e-tests.result }}'
            ].every(result => result === 'success' || result === 'skipped');
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: allJobsSuccessful ? 'success' : 'failure',
              target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: allJobsSuccessful ? 'All CI checks passed' : 'CI checks failed',
              context: 'ci/pipeline-status'
            });

  cleanup:
    needs: [deploy-staging, deploy-production]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Clean up resources
        run: |
          # Clean up any temporary resources
          echo "Cleaning up CI/CD resources..."
          
          # Remove any temporary files or caches if needed
          docker system prune -f || true
          
          echo "✅ Cleanup completed"