# FocusHive Authorization Security Implementation PRD

## Project Overview
Implement comprehensive authorization controls across all FocusHive microservices using Spring Security @PreAuthorize annotations and centralized security services. This addresses critical security gaps identified in the current system where only 1 out of 15 controllers has proper authorization.

## Current Security Issues
- Only 1/15 controllers have @PreAuthorize annotations
- No centralized authorization logic
- CORS configuration uses wildcards (security risk)  
- Missing role-based access control (RBAC)
- No resource-level access controls
- Potential for privilege escalation

## Business Requirements

### Core Security Principles
1. Fail Closed: Deny access by default
2. Least Privilege: Users only access resources they own or have explicit permission for
3. Defense in Depth: Multiple layers of security checks
4. Clear Audit Trail: All access attempts logged
5. Performance Optimized: Authorization checks with minimal performance impact

### User Stories

#### As a User
- I can only access my own profile and data
- I can only see and interact with hives I'm a member of
- I can only manage my own timer sessions and personas
- I cannot access other users' private information

#### As a Hive Owner
- I can manage members and settings of hives I own
- I can delete hives I own
- I cannot access or modify hives I don't own

#### As an Admin
- I can create system-wide announcements
- I can access admin-only endpoints
- I have elevated privileges for system management

#### As a Premium User
- I have access to premium features
- I have extended hive creation limits
- I can access advanced analytics

## Technical Requirements

### 1. Security Service Implementation
Create SecurityService in each microservice containing:
- hasAccessToUser(Long userId): Check if current user can access user data
- hasAccessToHive(Long hiveId): Check if user is member of hive  
- hasAccessToTimer(Long timerId): Check if user owns timer session
- hasAccessToChat(Long chatId): Check if user can access chat
- isOwner(Long resourceId): Check if user owns resource
- hasRole(String role): Check user role
- isHiveMember(Long hiveId): Check hive membership
- isHiveOwner(Long hiveId): Check hive ownership

### 2. Role-Based Access Control (RBAC)
Define role hierarchy:
- USER: Basic authenticated user
- PREMIUM_USER: Paid subscription user
- HIVE_OWNER: Can create and manage hives
- ADMIN: System administrator
- SUPER_ADMIN: Full system access

### 3. Controller Authorization
Apply @PreAuthorize annotations to ALL endpoints in:

#### Identity Service
- UserController: User profile management
- PersonaController: User persona management  
- OAuth2Controller: OAuth2 operations

#### FocusHive Backend
- HiveController: Hive management
- TimerController: Timer session management
- PresenceController: User presence
- UserController: User operations

#### Chat Service
- ChatController: Chat operations
- AnnouncementController: System announcements

#### Analytics Service
- AnalyticsController: Analytics access

### 4. CORS Security
- Remove wildcard (*) origins
- Configure environment-specific allowed origins
- Implement proper credential handling
- Add request validation

### 5. Audit and Monitoring
- Log all authorization attempts
- Track failed access attempts
- Monitor for potential security violations
- Performance metrics for authorization checks

## Success Criteria
1. All 15+ controllers have proper @PreAuthorize annotations
2. SecurityService implemented in all services
3. Role-based access control fully operational
4. CORS properly configured for all environments
5. Zero unauthorized access possible to user data
6. Authorization performance impact < 5ms per request
7. Comprehensive audit logging in place
8. All existing functionality preserved

## Technical Constraints
- Must maintain backward compatibility with existing APIs
- Performance impact must be minimal
- Must work with existing JWT authentication
- Spring Security integration required
- Database schema changes minimal

## Deliverables
1. SecurityService classes for each microservice
2. Updated controller classes with @PreAuthorize
3. Role enum and hierarchy implementation  
4. Updated CORS configuration
5. Authorization test coverage > 90%
6. Security documentation
7. Performance benchmarking report

## Risk Mitigation
- Comprehensive testing before deployment
- Gradual rollout with feature flags
- Rollback plan if issues arise
- Performance monitoring during deployment
- Security review by external audit