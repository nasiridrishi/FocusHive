version: '3.8'

# Monitoring and Logging Stack for FocusHive
# Usage: docker-compose -f docker-compose.yml -f docker-compose.monitoring.yml up

services:
  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: focushive-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    volumes:
      - ./docker/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./docker/monitoring/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - focushive-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana - Metrics Visualization
  grafana:
    image: grafana/grafana:10.2.2
    container_name: focushive-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel
      GF_SERVER_ROOT_URL: ${GRAFANA_ROOT_URL:-http://localhost:3001}
      GF_SMTP_ENABLED: ${GF_SMTP_ENABLED:-false}
      GF_SMTP_HOST: ${GF_SMTP_HOST:-smtp.gmail.com:587}
      GF_SMTP_USER: ${GF_SMTP_USER}
      GF_SMTP_PASSWORD: ${GF_SMTP_PASSWORD}
      GF_SMTP_FROM_ADDRESS: ${GF_SMTP_FROM_ADDRESS:-alerts@focushive.com}
    volumes:
      - ./docker/monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./docker/monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana_data:/var/lib/grafana
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    depends_on:
      - prometheus
    networks:
      - focushive-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AlertManager - Alert Management
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: focushive-alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
      - '--web.listen-address=:9093'
    volumes:
      - ./docker/monitoring/alertmanager/config.yml:/etc/alertmanager/config.yml:ro
      - alertmanager_data:/alertmanager
    ports:
      - "${ALERTMANAGER_PORT:-9093}:9093"
    networks:
      - focushive-network
    restart: unless-stopped

  # Node Exporter - Host Metrics
  node-exporter:
    image: prom/node-exporter:v1.7.0
    container_name: focushive-node-exporter
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    ports:
      - "${NODE_EXPORTER_PORT:-9100}:9100"
    networks:
      - focushive-network
    restart: unless-stopped

  # PostgreSQL Exporter - Database Metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    container_name: focushive-postgres-exporter
    environment:
      DATA_SOURCE_NAME: postgresql://focushive:${DB_PASSWORD:-focushive123}@postgres:5432/focushive?sslmode=disable
      PG_EXPORTER_AUTO_DISCOVER_DATABASES: 'true'
    ports:
      - "${POSTGRES_EXPORTER_PORT:-9187}:9187"
    depends_on:
      - postgres
    networks:
      - focushive-network
    restart: unless-stopped

  # Redis Exporter - Cache Metrics
  redis-exporter:
    image: oliver006/redis_exporter:v1.55.0
    container_name: focushive-redis-exporter
    environment:
      REDIS_ADDR: redis://redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
    ports:
      - "${REDIS_EXPORTER_PORT:-9121}:9121"
    depends_on:
      - redis
    networks:
      - focushive-network
    restart: unless-stopped

  # Elasticsearch - Log Storage
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.3
    container_name: focushive-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - cluster.name=focushive-logs
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
    networks:
      - focushive-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Logstash - Log Processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.3
    container_name: focushive-logstash
    volumes:
      - ./docker/monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./docker/monitoring/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
    ports:
      - "${LOGSTASH_PORT:-5000}:5000/tcp"
      - "${LOGSTASH_UDP_PORT:-5000}:5000/udp"
      - "${LOGSTASH_BEATS_PORT:-5044}:5044"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - focushive-network
    restart: unless-stopped

  # Kibana - Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.3
    container_name: focushive-kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
      SERVER_NAME: focushive-kibana
      SERVER_HOST: "0.0.0.0"
      TELEMETRY_ENABLED: "false"
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - focushive-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Loki - Lightweight Log Aggregation
  loki:
    image: grafana/loki:2.9.3
    container_name: focushive-loki
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./docker/monitoring/loki/config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    ports:
      - "${LOKI_PORT:-3100}:3100"
    networks:
      - focushive-network
    restart: unless-stopped

  # Promtail - Log Collector for Loki
  promtail:
    image: grafana/promtail:2.9.3
    container_name: focushive-promtail
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./docker/monitoring/promtail/config.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - focushive-network
    restart: unless-stopped

  # Jaeger - Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.52
    container_name: focushive-jaeger
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: ":9411"
      COLLECTOR_OTLP_ENABLED: "true"
    ports:
      - "${JAEGER_UI_PORT:-16686}:16686"        # Jaeger UI
      - "${JAEGER_COLLECTOR_PORT:-14268}:14268" # Jaeger collector
      - "${JAEGER_OTLP_GRPC:-4317}:4317"       # OTLP gRPC
      - "${JAEGER_OTLP_HTTP:-4318}:4318"       # OTLP HTTP
    networks:
      - focushive-network
    restart: unless-stopped

  # cAdvisor - Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: focushive-cadvisor
    privileged: true
    devices:
      - /dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "${CADVISOR_PORT:-8090}:8080"
    networks:
      - focushive-network
    restart: unless-stopped

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  elasticsearch_data:
    driver: local
  loki_data:
    driver: local

networks:
  focushive-network:
    external: true