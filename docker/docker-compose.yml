# Docker Compose for FocusHive Application - Development Environment
# Updated with 2025 best practices for performance, security, and maintainability
version: '3.9'

services:
  # PostgreSQL Database
  db:
    image: postgres:16-alpine
    container_name: focushive-db
    environment:
      POSTGRES_DB: ${DB_NAME:-focushive}
      POSTGRES_USER: ${DB_USER:-focushive_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-focushive_pass}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    ports:
      - "127.0.0.1:5434:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../scripts/db/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
      - app_logs:/var/log/postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-focushive_user} -d ${DB_NAME:-focushive}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - focushive-network

  # Redis for presence pub/sub
  redis:
    image: redis:7-alpine
    container_name: focushive-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-focushive_pass} --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "127.0.0.1:6380:6379"
    volumes:
      - redis_data:/data
      - app_logs:/var/log/redis
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-focushive_pass}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - focushive-network

  # Identity Service Database
  identity-db:
    image: postgres:16-alpine
    container_name: identity-db
    environment:
      POSTGRES_DB: ${IDENTITY_DB_NAME:-identity_db}
      POSTGRES_USER: ${IDENTITY_DB_USER:-identity_user}
      POSTGRES_PASSWORD: ${IDENTITY_DB_PASSWORD:-identity_pass}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    ports:
      - "127.0.0.1:5433:5432"
    volumes:
      - identity_db_data:/var/lib/postgresql/data
      - ../scripts/db/init-identity-db.sh:/docker-entrypoint-initdb.d/init-identity-db.sh
      - app_logs:/var/log/postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${IDENTITY_DB_USER:-identity_user} -d ${IDENTITY_DB_NAME:-identity_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - focushive-network

  # Identity Service Redis
  identity-redis:
    image: redis:7-alpine
    container_name: identity-redis
    command: redis-server --requirepass ${IDENTITY_REDIS_PASSWORD:-identity_redis_pass} --appendonly yes --maxmemory 128mb --maxmemory-policy allkeys-lru
    volumes:
      - identity_redis_data:/data
      - app_logs:/var/log/redis
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${IDENTITY_REDIS_PASSWORD:-identity_redis_pass}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - focushive-network

  # Identity Service (Spring Boot)
  identity-service:
    build:
      context: ../services/identity-service
      dockerfile: Dockerfile
    container_name: identity-service
    ports:
      - "127.0.0.1:8081:8081"
    environment:
      # Database
      DB_HOST: identity-db
      DB_PORT: 5432
      DB_NAME: ${IDENTITY_DB_NAME:-identity_db}
      DB_USER: ${IDENTITY_DB_USER:-identity_user}
      DB_PASSWORD: ${IDENTITY_DB_PASSWORD:-identity_pass}
      # Redis
      REDIS_HOST: identity-redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${IDENTITY_REDIS_PASSWORD:-identity_redis_pass}
      # Security
      KEY_STORE_PASSWORD: ${KEY_STORE_PASSWORD:-changeme}
      PRIVATE_KEY_PASSWORD: ${PRIVATE_KEY_PASSWORD:-changeme}
      FOCUSHIVE_CLIENT_SECRET: ${FOCUSHIVE_CLIENT_SECRET:-secret}
      # CORS
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost:5173,http://localhost:8080}
      # Application
      SERVER_PORT: 8081
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      SHOW_SQL: ${SHOW_SQL:-false}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-default}
      # Management
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,prometheus
      MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: when_authorized
    volumes:
      - app_logs:/app/logs
    depends_on:
      identity-db:
        condition: service_healthy
      identity-redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - focushive-network

  # Spring Boot Backend
  backend:
    build:
      context: ../services/focushive-backend
      dockerfile: Dockerfile
    container_name: focushive-backend
    ports:
      - "127.0.0.1:8080:8080"
    environment:
      # Database
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-focushive}
      DB_USER: ${DB_USER:-focushive_user}
      DB_PASSWORD: ${DB_PASSWORD:-focushive_pass}
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-focushive_pass}
      # Identity Service
      IDENTITY_SERVICE_URL: http://identity-service:8081
      # Application
      SERVER_PORT: 8080
      JWT_SECRET: ${JWT_SECRET}  # CRITICAL: Must be set in environment - no default for security
      JWT_EXPIRATION: ${JWT_EXPIRATION:-86400000}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      SHOW_SQL: ${SHOW_SQL:-false}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-default}
      # Management
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,prometheus
      MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: when_authorized
    volumes:
      - app_logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      identity-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - focushive-network

  # Music Service Database
  music-db:
    image: postgres:16-alpine
    container_name: music-db
    environment:
      POSTGRES_DB: ${MUSIC_DB_NAME:-focushive_music}
      POSTGRES_USER: ${MUSIC_DB_USER:-music_user}
      POSTGRES_PASSWORD: ${MUSIC_DB_PASSWORD:-music_pass}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    ports:
      - "127.0.0.1:5435:5432"
    volumes:
      - music_db_data:/var/lib/postgresql/data
      - app_logs:/var/log/postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${MUSIC_DB_USER:-music_user} -d ${MUSIC_DB_NAME:-focushive_music}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - focushive-network

  # Music Service Redis
  music-redis:
    image: redis:7-alpine
    container_name: music-redis
    command: redis-server --requirepass ${MUSIC_REDIS_PASSWORD:-music_redis_pass} --appendonly yes --maxmemory 128mb --maxmemory-policy allkeys-lru
    volumes:
      - music_redis_data:/data
      - app_logs:/var/log/redis
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${MUSIC_REDIS_PASSWORD:-music_redis_pass}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - focushive-network

  # Notification Service Database
  notification-db:
    image: postgres:16-alpine
    container_name: notification-db
    environment:
      POSTGRES_DB: ${NOTIFICATION_DB_NAME:-notification_service}
      POSTGRES_USER: ${NOTIFICATION_DB_USER:-notification_user}
      POSTGRES_PASSWORD: ${NOTIFICATION_DB_PASSWORD:-notification_pass}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    ports:
      - "127.0.0.1:5436:5432"
    volumes:
      - notification_db_data:/var/lib/postgresql/data
      - app_logs:/var/log/postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${NOTIFICATION_DB_USER:-notification_user} -d ${NOTIFICATION_DB_NAME:-notification_service}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - focushive-network

  # Chat Service Database
  chat-db:
    image: postgres:16-alpine
    container_name: chat-db
    environment:
      POSTGRES_DB: ${CHAT_DB_NAME:-chat_service}
      POSTGRES_USER: ${CHAT_DB_USER:-chat_user}
      POSTGRES_PASSWORD: ${CHAT_DB_PASSWORD:-chat_pass}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    ports:
      - "127.0.0.1:5437:5432"
    volumes:
      - chat_db_data:/var/lib/postgresql/data
      - app_logs:/var/log/postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${CHAT_DB_USER:-chat_user} -d ${CHAT_DB_NAME:-chat_service}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - focushive-network

  # Analytics Service Database
  analytics-db:
    image: postgres:16-alpine
    container_name: analytics-db
    environment:
      POSTGRES_DB: ${ANALYTICS_DB_NAME:-analytics_service}
      POSTGRES_USER: ${ANALYTICS_DB_USER:-analytics_user}
      POSTGRES_PASSWORD: ${ANALYTICS_DB_PASSWORD:-analytics_pass}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    ports:
      - "127.0.0.1:5438:5432"
    volumes:
      - analytics_db_data:/var/lib/postgresql/data
      - app_logs:/var/log/postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${ANALYTICS_DB_USER:-analytics_user} -d ${ANALYTICS_DB_NAME:-analytics_service}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - focushive-network

  # Forum Service Database
  forum-db:
    image: postgres:16-alpine
    container_name: forum-db
    environment:
      POSTGRES_DB: ${FORUM_DB_NAME:-forum_service}
      POSTGRES_USER: ${FORUM_DB_USER:-forum_user}
      POSTGRES_PASSWORD: ${FORUM_DB_PASSWORD:-forum_pass}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    ports:
      - "127.0.0.1:5439:5432"
    volumes:
      - forum_db_data:/var/lib/postgresql/data
      - app_logs:/var/log/postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${FORUM_DB_USER:-forum_user} -d ${FORUM_DB_NAME:-forum_service}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - focushive-network

  # Buddy Service Database
  buddy-db:
    image: postgres:16-alpine
    container_name: buddy-db
    environment:
      POSTGRES_DB: ${BUDDY_DB_NAME:-buddy_service}
      POSTGRES_USER: ${BUDDY_DB_USER:-buddy_user}
      POSTGRES_PASSWORD: ${BUDDY_DB_PASSWORD:-buddy_pass}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    ports:
      - "127.0.0.1:5440:5432"
    volumes:
      - buddy_db_data:/var/lib/postgresql/data
      - app_logs:/var/log/postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${BUDDY_DB_USER:-buddy_user} -d ${BUDDY_DB_NAME:-buddy_service}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - focushive-network

  # Music Service (Spring Boot)
  music-service:
    build:
      context: ../services/music-service
      dockerfile: Dockerfile
    container_name: music-service
    ports:
      - "127.0.0.1:8082:8082"
    environment:
      # Database
      DB_HOST: music-db
      DB_PORT: 5432
      DB_NAME: ${MUSIC_DB_NAME:-focushive_music}
      DB_USER: ${MUSIC_DB_USER:-music_user}
      DB_PASSWORD: ${MUSIC_DB_PASSWORD:-music_pass}
      # Redis
      REDIS_HOST: music-redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${MUSIC_REDIS_PASSWORD:-music_redis_pass}
      # Spotify API
      SPOTIFY_CLIENT_ID: ${SPOTIFY_CLIENT_ID}
      SPOTIFY_CLIENT_SECRET: ${SPOTIFY_CLIENT_SECRET}
      SPOTIFY_REDIRECT_URI: ${SPOTIFY_REDIRECT_URI:-http://localhost:8082/api/music/spotify/callback}
      # Identity Service
      IDENTITY_SERVICE_URL: http://identity-service:8081
      # Application
      SERVER_PORT: 8082
      JWT_SECRET: ${JWT_SECRET}  # CRITICAL: Must be set in environment - no default for security
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      SHOW_SQL: ${SHOW_SQL:-false}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-default}
      # Management
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,prometheus
      MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: when_authorized
    volumes:
      - app_logs:/app/logs
    depends_on:
      music-db:
        condition: service_healthy
      music-redis:
        condition: service_healthy
      identity-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - focushive-network

  # Notification Service (Spring Boot)
  notification-service:
    build:
      context: ../services/notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    ports:
      - "127.0.0.1:8083:8083"
    environment:
      # Database
      DB_HOST: notification-db
      DB_PORT: 5432
      DB_NAME: ${NOTIFICATION_DB_NAME:-notification_service}
      DB_USER: ${NOTIFICATION_DB_USER:-notification_user}
      DB_PASSWORD: ${NOTIFICATION_DB_PASSWORD:-notification_pass}
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-focushive_pass}
      # Identity Service
      JWT_ISSUER_URI: http://identity-service:8081/identity
      # Application
      SERVER_PORT: 8083
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      SHOW_SQL: ${SHOW_SQL:-false}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-default}
      # Management
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,prometheus
      MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: when_authorized
    volumes:
      - app_logs:/app/logs
    depends_on:
      notification-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      identity-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8083/notifications/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - focushive-network

  # Chat Service (Spring Boot)
  chat-service:
    build:
      context: ../services/chat-service
      dockerfile: Dockerfile
    container_name: chat-service
    ports:
      - "127.0.0.1:8084:8084"
    environment:
      # Database
      DB_HOST: chat-db
      DB_PORT: 5432
      DB_NAME: ${CHAT_DB_NAME:-chat_service}
      DB_USER: ${CHAT_DB_USER:-chat_user}
      DB_PASSWORD: ${CHAT_DB_PASSWORD:-chat_pass}
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-focushive_pass}
      # Identity Service
      JWT_ISSUER_URI: http://identity-service:8081/identity
      # WebSocket
      WEBSOCKET_ALLOWED_ORIGINS: ${WEBSOCKET_ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:5173,http://localhost:80}
      # Application
      SERVER_PORT: 8084
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      SHOW_SQL: ${SHOW_SQL:-false}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-default}
      # Management
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,prometheus
      MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: when_authorized
    volumes:
      - app_logs:/app/logs
    depends_on:
      chat-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      identity-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8084/chat/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - focushive-network

  # Analytics Service (Spring Boot)
  analytics-service:
    build:
      context: ../services/analytics-service
      dockerfile: Dockerfile
    container_name: analytics-service
    ports:
      - "127.0.0.1:8085:8085"
    environment:
      # Database
      DB_HOST: analytics-db
      DB_PORT: 5432
      DB_NAME: ${ANALYTICS_DB_NAME:-analytics_service}
      DB_USER: ${ANALYTICS_DB_USER:-analytics_user}
      DB_PASSWORD: ${ANALYTICS_DB_PASSWORD:-analytics_pass}
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-focushive_pass}
      # Identity Service
      JWT_ISSUER_URI: http://identity-service:8081/identity
      # Application
      SERVER_PORT: 8085
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      SHOW_SQL: ${SHOW_SQL:-false}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-default}
      # Management
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,prometheus
      MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: when_authorized
    volumes:
      - app_logs:/app/logs
    depends_on:
      analytics-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      identity-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8085/analytics/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - focushive-network

  # Forum Service (Spring Boot)
  forum-service:
    build:
      context: ../services/forum-service
      dockerfile: Dockerfile
    container_name: forum-service
    ports:
      - "127.0.0.1:8086:8086"
    environment:
      # Database
      DB_HOST: forum-db
      DB_PORT: 5432
      DB_NAME: ${FORUM_DB_NAME:-forum_service}
      DB_USER: ${FORUM_DB_USER:-forum_user}
      DB_PASSWORD: ${FORUM_DB_PASSWORD:-forum_pass}
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-focushive_pass}
      # Identity Service
      JWT_ISSUER_URI: http://identity-service:8081/identity
      # Application
      SERVER_PORT: 8086
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      SHOW_SQL: ${SHOW_SQL:-false}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-default}
      # Management
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,prometheus
      MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: when_authorized
    volumes:
      - app_logs:/app/logs
    depends_on:
      forum-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      identity-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8086/forum/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - focushive-network

  # Buddy Service (Spring Boot)
  buddy-service:
    build:
      context: ../services/buddy-service
      dockerfile: Dockerfile
    container_name: buddy-service
    ports:
      - "127.0.0.1:8087:8087"
    environment:
      # Database
      DB_HOST: buddy-db
      DB_PORT: 5432
      DB_NAME: ${BUDDY_DB_NAME:-buddy_service}
      DB_USER: ${BUDDY_DB_USER:-buddy_user}
      DB_PASSWORD: ${BUDDY_DB_PASSWORD:-buddy_pass}
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-focushive_pass}
      # Identity Service
      JWT_ISSUER_URI: http://identity-service:8081/identity
      # Application
      SERVER_PORT: 8087
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      SHOW_SQL: ${SHOW_SQL:-false}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-default}
      # Management
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,prometheus
      MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: when_authorized
    volumes:
      - app_logs:/app/logs
    depends_on:
      buddy-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      identity-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8087/buddy/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - focushive-network

  # NGINX API Gateway
  nginx:
    image: nginx:1.25-alpine
    container_name: focushive-nginx
    ports:
      - "0.0.0.0:${NGINX_HTTP_PORT:-80}:80"
      - "0.0.0.0:${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - app_logs:/var/log/nginx
    depends_on:
      - backend
      - identity-service
      - music-service
      - notification-service
      - chat-service
      - analytics-service
      - forum-service
      - buddy-service
      - web
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - focushive-network

  # React Frontend (Vite dev server)
  web:
    build:
      context: ../frontend
      dockerfile: Dockerfile
      target: development
    container_name: focushive-web
    ports:
      - "0.0.0.0:${FRONTEND_PORT:-5173}:5173"
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:80}
      VITE_IDENTITY_SERVICE_URL: ${VITE_IDENTITY_SERVICE_URL:-http://localhost:80}
      NODE_ENV: ${NODE_ENV:-development}
    volumes:
      - ../frontend:/app
      - /app/node_modules
      - app_logs:/app/logs
    depends_on:
      - backend
      - identity-service
    command: npm run dev
    restart: unless-stopped
    networks:
      - focushive-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  identity_db_data:
    driver: local
  identity_redis_data:
    driver: local
  music_db_data:
    driver: local
  music_redis_data:
    driver: local
  notification_db_data:
    driver: local
  chat_db_data:
    driver: local
  analytics_db_data:
    driver: local
  forum_db_data:
    driver: local
  buddy_db_data:
    driver: local
  app_logs:
    driver: local

networks:
  focushive-network:
    driver: bridge
    name: focushive-network
    ipam:
      config:
        - subnet: 172.20.0.0/16