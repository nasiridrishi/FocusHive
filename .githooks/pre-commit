#!/bin/bash

# FocusHive Pre-commit Hook
# This hook runs before every commit and cannot be bypassed
# It ensures code quality, tests pass, and all GitHub workflow checks pass locally

set -e  # Exit on any error

echo "🔍 FocusHive Pre-commit Hook Running..."
echo "📋 Running all GitHub Workflow checks locally..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

# Check if we're in the right directory
if [ ! -f "package.json" ] && [ ! -f "backend/build.gradle.kts" ]; then
    print_error "Not in FocusHive root directory"
    exit 1
fi

# Track if any checks fail
FAILED=0

echo ""
echo "════════════════════════════════════════════════════════"
echo "        GITHUB WORKFLOW CHECKS (CI Pipeline)            "
echo "════════════════════════════════════════════════════════"

# 1. BACKEND TESTS (from GitHub workflow)
if [ -d "backend" ] && git diff --cached --name-only | grep -E '^backend/.*\.(java|gradle|properties)$' > /dev/null; then
    echo ""
    print_info "Running Backend Tests (GitHub Workflow)"
    cd backend
    
    # Make gradlew executable
    chmod +x gradlew
    
    # Run tests with test profile
    export SPRING_PROFILES_ACTIVE=test
    if ! ./gradlew test; then
        print_error "Backend tests failed (GitHub workflow check)"
        FAILED=1
    else
        print_success "Backend tests passed"
    fi
    
    # Build backend
    print_info "Building backend..."
    if ! ./gradlew build; then
        print_error "Backend build failed (GitHub workflow check)"
        FAILED=1
    else
        print_success "Backend build passed"
    fi
    
    cd ..
fi

# 2. IDENTITY SERVICE TESTS (from GitHub workflow)
if [ -d "identity-service" ] && git diff --cached --name-only | grep -E '^identity-service/.*\.(java|gradle|properties)$' > /dev/null; then
    echo ""
    print_info "Running Identity Service Tests (GitHub Workflow)"
    cd identity-service
    
    # Make gradlew executable
    chmod +x gradlew
    
    # Run tests with test profile
    export SPRING_PROFILES_ACTIVE=test
    if ! ./gradlew test; then
        print_error "Identity Service tests failed (GitHub workflow check)"
        FAILED=1
    else
        print_success "Identity Service tests passed"
    fi
    
    # Build identity service
    print_info "Building identity service..."
    if ! ./gradlew build; then
        print_error "Identity Service build failed (GitHub workflow check)"
        FAILED=1
    else
        print_success "Identity Service build passed"
    fi
    
    cd ..
fi

# 3. FRONTEND TESTS (from GitHub workflow)
if [ -d "frontend" ] && git diff --cached --name-only | grep -E '^frontend/.*\.(ts|tsx|js|jsx|json)$' > /dev/null; then
    echo ""
    print_info "Running Frontend Tests (GitHub Workflow)"
    cd frontend
    
    # Install dependencies if needed
    if [ ! -d "node_modules" ]; then
        print_info "Installing frontend dependencies..."
        npm ci
    fi
    
    # Check if package-lock.json is in sync
    if ! npm ci --dry-run 2>/dev/null; then
        print_warning "package-lock.json is out of sync with package.json"
        print_info "Running npm install to update lock file..."
        npm install
        print_warning "package-lock.json has been updated - please stage it"
        git add package-lock.json
    fi
    
    # Run linting
    print_info "Running ESLint..."
    if ! npm run lint; then
        print_error "Frontend linting failed (GitHub workflow check)"
        FAILED=1
    else
        print_success "Frontend linting passed"
    fi
    
    # Run tests
    print_info "Running frontend tests..."
    if ! npm test -- --run; then
        print_error "Frontend tests failed (GitHub workflow check)"
        FAILED=1
    else
        print_success "Frontend tests passed"
    fi
    
    # Build frontend
    print_info "Building frontend..."
    if ! npm run build; then
        print_error "Frontend build failed (GitHub workflow check)"
        FAILED=1
    else
        print_success "Frontend build passed"
    fi
    
    cd ../..
fi

echo ""
echo "════════════════════════════════════════════════════════"
echo "            ADDITIONAL CODE QUALITY CHECKS              "
echo "════════════════════════════════════════════════════════"

# 4. Check for debugging statements
echo ""
print_info "Checking for debugging statements..."
if git diff --cached --name-only | grep -E '\.(js|ts|tsx|jsx|java)$' | xargs grep -E 'console\.(log|debug|info)|System\.out\.print|debugger' 2>/dev/null | grep -v -E '(test|spec|__tests__|\.test\.|\.spec\.)'; then
    print_error "Found debugging statements in code. Please remove them."
    FAILED=1
else
    print_success "No debugging statements found"
fi

# 5. Check for merge conflict markers
print_info "Checking for merge conflict markers..."
if git diff --cached --name-only | xargs grep -E '^(<<<<<<<|=======|>>>>>>>)' 2>/dev/null; then
    print_error "Found merge conflict markers. Please resolve conflicts."
    FAILED=1
else
    print_success "No merge conflicts found"
fi

# 6. Check for sensitive data
print_info "Checking for sensitive data..."
if git diff --cached --name-only | xargs grep -E '(password|secret|token|api_key|apikey|private_key|aws_access|bearer)\s*=\s*["'"'"'][^"'"'"']+["'"'"']' 2>/dev/null | grep -v -E '(example|sample|test|mock|dummy|placeholder|\.env\.example)'; then
    print_error "Found potential sensitive data. Please use environment variables."
    FAILED=1
else
    print_success "No sensitive data found"
fi

# 7. Check file sizes
print_info "Checking file sizes..."
CHANGED_FILES=$(git diff --cached --name-only)
if [ ! -z "$CHANGED_FILES" ]; then
    LARGE_FILES=$(echo "$CHANGED_FILES" | xargs ls -la 2>/dev/null | awk '$5 > 5242880 {print $9}' | grep -v -E '\.(jpg|jpeg|png|gif|pdf|zip|jar)$' || true)
    if [ ! -z "$LARGE_FILES" ]; then
        print_error "Found files larger than 5MB that shouldn't be committed:"
        echo "$LARGE_FILES"
        FAILED=1
    else
        print_success "No large files found"
    fi
else
    print_success "No files to check for size"
fi

# 8. TypeScript compilation check (additional to workflow)
if git diff --cached --name-only | grep -E '^frontend/.*\.(ts|tsx)$' > /dev/null; then
    echo ""
    print_info "Checking TypeScript compilation..."
    cd frontend
    if ! npx tsc --noEmit; then
        print_error "TypeScript compilation failed"
        FAILED=1
    else
        print_success "TypeScript compilation passed"
    fi
    cd ../..
fi

# 9. Check commit message format
COMMIT_MSG_FILE=".git/COMMIT_EDITMSG"
if [ -f "$COMMIT_MSG_FILE" ]; then
    COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")
    if ! echo "$COMMIT_MSG" | grep -E '^(feat|fix|docs|style|refactor|test|chore|build|ci|perf)(\(.+\))?: .{1,72}' > /dev/null; then
        print_warning "Commit message doesn't follow conventional format"
        print_warning "Format: <type>(<scope>): <subject>"
        print_warning "Types: feat, fix, docs, style, refactor, test, chore, build, ci, perf"
    fi
fi

# 10. Check for TODO/FIXME comments
print_info "Checking for TODO/FIXME comments..."
TODO_COUNT=$(git diff --cached --name-only | xargs grep -E '(TODO|FIXME|XXX|HACK)' 2>/dev/null | wc -l)
if [ $TODO_COUNT -gt 0 ]; then
    print_warning "Found $TODO_COUNT TODO/FIXME comments. Consider addressing them."
fi

echo ""
echo "════════════════════════════════════════════════════════"

# Final result
if [ $FAILED -eq 1 ]; then
    echo ""
    print_error "Pre-commit checks failed! Commit aborted."
    print_error "Fix the issues above and try again."
    print_error "These checks mirror GitHub Actions CI pipeline."
    print_error "This hook cannot be bypassed for code quality."
    exit 1
else
    echo ""
    print_success "All pre-commit checks passed! ✨"
    print_success "Your code meets GitHub Actions CI standards locally."
    exit 0
fi