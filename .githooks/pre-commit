#!/bin/bash

# FocusHive Pre-commit Hook
# This hook runs before every commit and cannot be bypassed
# It ensures code quality, tests pass, and standards are met

set -e  # Exit on any error

echo "🔍 FocusHive Pre-commit Hook Running..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

# Check if we're in the right directory
if [ ! -f "package.json" ] && [ ! -f "backend/build.gradle.kts" ]; then
    print_error "Not in FocusHive root directory"
    exit 1
fi

# Track if any checks fail
FAILED=0

# 1. Check for debugging statements
echo "Checking for debugging statements..."
if git diff --cached --name-only | grep -E '\.(js|ts|tsx|jsx|java)$' | xargs grep -E 'console\.(log|debug|info)|System\.out\.print|debugger' 2>/dev/null; then
    print_error "Found debugging statements in code. Please remove them."
    FAILED=1
else
    print_success "No debugging statements found"
fi

# 2. Check for merge conflict markers
echo "Checking for merge conflict markers..."
if git diff --cached --name-only | xargs grep -E '^(<<<<<<<|=======|>>>>>>>)' 2>/dev/null; then
    print_error "Found merge conflict markers. Please resolve conflicts."
    FAILED=1
else
    print_success "No merge conflicts found"
fi

# 3. Check for sensitive data
echo "Checking for sensitive data..."
if git diff --cached --name-only | xargs grep -i -E 'password\s*=|secret\s*=|token\s*=|api_key\s*=|apikey\s*=|private_key\s*=' 2>/dev/null | grep -v -E 'example|sample|test|mock|dummy|placeholder'; then
    print_error "Found potential sensitive data. Please use environment variables."
    FAILED=1
else
    print_success "No sensitive data found"
fi

# 4. Frontend checks (if frontend files changed)
if git diff --cached --name-only | grep -E '^frontend/.*\.(ts|tsx|js|jsx)$' > /dev/null; then
    echo "Running frontend checks..."
    
    cd frontend/web
    
    # TypeScript compilation check
    echo "Checking TypeScript compilation..."
    if ! npx tsc --noEmit; then
        print_error "TypeScript compilation failed"
        FAILED=1
    else
        print_success "TypeScript compilation passed"
    fi
    
    # ESLint check
    echo "Running ESLint..."
    if ! npm run lint; then
        print_error "ESLint found issues"
        FAILED=1
    else
        print_success "ESLint passed"
    fi
    
    # Run tests
    echo "Running frontend tests..."
    if ! npm test -- --watchAll=false --passWithNoTests; then
        print_error "Frontend tests failed"
        FAILED=1
    else
        print_success "Frontend tests passed"
    fi
    
    cd ../..
fi

# 5. Backend checks (if backend files changed)
if git diff --cached --name-only | grep -E '^backend/.*\.java$' > /dev/null; then
    echo "Running backend checks..."
    
    cd backend
    
    # Compile check
    echo "Checking Java compilation..."
    if ! ./gradlew compileJava compileTestJava; then
        print_error "Java compilation failed"
        FAILED=1
    else
        print_success "Java compilation passed"
    fi
    
    # Run tests
    echo "Running backend tests..."
    if ! ./gradlew test; then
        print_error "Backend tests failed"
        FAILED=1
    else
        print_success "Backend tests passed"
    fi
    
    cd ..
fi

# 6. Identity Service checks (if identity service files changed)
if git diff --cached --name-only | grep -E '^identity-service/.*\.java$' > /dev/null; then
    echo "Running identity service checks..."
    
    cd identity-service
    
    # Compile check
    echo "Checking Identity Service compilation..."
    if ! ./gradlew compileJava compileTestJava; then
        print_error "Identity Service compilation failed"
        FAILED=1
    else
        print_success "Identity Service compilation passed"
    fi
    
    cd ..
fi

# 7. Check file sizes
echo "Checking file sizes..."
LARGE_FILES=$(git diff --cached --name-only | xargs ls -la 2>/dev/null | awk '$5 > 5242880 {print $9}' | grep -v -E '\.(jpg|jpeg|png|gif|pdf|zip|jar)$')
if [ ! -z "$LARGE_FILES" ]; then
    print_error "Found files larger than 5MB that shouldn't be committed:"
    echo "$LARGE_FILES"
    FAILED=1
else
    print_success "No large files found"
fi

# 8. Check commit message format
COMMIT_MSG_FILE=".git/COMMIT_EDITMSG"
if [ -f "$COMMIT_MSG_FILE" ]; then
    COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")
    if ! echo "$COMMIT_MSG" | grep -E '^(feat|fix|docs|style|refactor|test|chore|build|ci|perf)(\(.+\))?: .{1,72}' > /dev/null; then
        print_warning "Commit message doesn't follow conventional format"
        print_warning "Format: <type>(<scope>): <subject>"
        print_warning "Types: feat, fix, docs, style, refactor, test, chore, build, ci, perf"
    fi
fi

# 9. Check for TODO/FIXME comments
echo "Checking for TODO/FIXME comments..."
TODO_COUNT=$(git diff --cached --name-only | xargs grep -E '(TODO|FIXME|XXX|HACK)' 2>/dev/null | wc -l)
if [ $TODO_COUNT -gt 0 ]; then
    print_warning "Found $TODO_COUNT TODO/FIXME comments. Consider addressing them."
fi

# Final result
if [ $FAILED -eq 1 ]; then
    echo ""
    print_error "Pre-commit checks failed! Commit aborted."
    print_error "Fix the issues above and try again."
    print_error "This hook cannot be bypassed for code quality."
    exit 1
else
    echo ""
    print_success "All pre-commit checks passed! ✨"
    exit 0
fi