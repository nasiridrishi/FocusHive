#!/bin/bash

# FocusHive Commit Message Hook
# Validates commit message format and adds Linear task ID if missing

COMMIT_MSG_FILE=$1
COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

# Check if commit message follows conventional format
if ! echo "$COMMIT_MSG" | grep -E '^(feat|fix|docs|style|refactor|test|chore|build|ci|perf)(\(.+\))?: .{1,72}' > /dev/null; then
    print_error "Commit message doesn't follow conventional format!"
    print_error "Format: <type>(<scope>): <subject>"
    print_error "Example: feat(auth): Add JWT authentication"
    echo ""
    echo "Types:"
    echo "  feat:     A new feature"
    echo "  fix:      A bug fix"
    echo "  docs:     Documentation only changes"
    echo "  style:    Formatting, missing semi colons, etc"
    echo "  refactor: Code change that neither fixes a bug nor adds a feature"
    echo "  test:     Adding missing tests"
    echo "  chore:    Maintain tasks"
    echo "  build:    Changes to build process"
    echo "  ci:       CI configuration changes"
    echo "  perf:     Performance improvements"
    exit 1
fi

# Check for Linear task ID
if ! echo "$COMMIT_MSG" | grep -E '\[UOL-[0-9]+\]' > /dev/null; then
    # Try to extract from branch name
    BRANCH=$(git symbolic-ref --short HEAD)
    if echo "$BRANCH" | grep -E 'UOL-[0-9]+' > /dev/null; then
        TASK_ID=$(echo "$BRANCH" | grep -oE 'UOL-[0-9]+' | head -1)
        # Add task ID to commit message
        echo "$COMMIT_MSG [$TASK_ID]" > "$COMMIT_MSG_FILE"
        print_warning "Added Linear task ID [$TASK_ID] from branch name"
    else
        print_warning "No Linear task ID found in commit message"
        print_warning "Consider adding [UOL-XXX] to link to Linear task"
    fi
fi

# Check commit message length
FIRST_LINE=$(echo "$COMMIT_MSG" | head -1)
if [ ${#FIRST_LINE} -gt 72 ]; then
    print_error "First line of commit message is too long (${#FIRST_LINE} > 72 characters)"
    exit 1
fi

print_success "Commit message validated!"
exit 0