version: '3.8'

# ===================================================================
# COMPREHENSIVE E2E TEST ENVIRONMENT FOR FOCUSHIVE
# 
# This configuration starts all 8 microservices required for E2E testing:
# - focushive-backend (8080)
# - identity-service (8081)  
# - music-service (8082)
# - notification-service (8083)
# - chat-service (8084)
# - analytics-service (8085)
# - forum-service (8086)
# - buddy-service (8087)
#
# Plus supporting infrastructure:
# - PostgreSQL (test databases)
# - Redis (for real-time features)
# - Mock servers for external dependencies
# - Test data seeding
# ===================================================================

services:
  # ===== TEST DATABASES =====
  
  test-db:
    image: postgres:16-alpine
    container_name: focushive-test-db
    environment:
      POSTGRES_DB: focushive_test
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_pass
      POSTGRES_MULTIPLE_DATABASES: identity_test,music_test,notification_test,chat_test,analytics_test,forum_test,buddy_test
    volumes:
      - ./docker/postgres/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
      - ./docker/test-data/seed-data.sql:/docker-entrypoint-initdb.d/01-seed-data.sql
      - test_db_data:/var/lib/postgresql/data
    networks:
      - focushive-e2e-network
    ports:
      - "5433:5432"  # Expose for debugging
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d focushive_test"]
      interval: 5s
      timeout: 3s
      retries: 12
      start_period: 10s

  test-redis:
    image: redis:7-alpine
    container_name: focushive-test-redis
    command: redis-server --requirepass test_redis_pass
    volumes:
      - test_redis_data:/data
    networks:
      - focushive-e2e-network
    ports:
      - "6380:6379"  # Expose for debugging
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "test_redis_pass", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 5s

  # ===== MOCK EXTERNAL SERVICES =====
  
  spotify-mock:
    image: wiremock/wiremock:3.0.1
    container_name: spotify-mock
    command: ["--global-response-templating", "--disable-gzip", "--verbose"]
    volumes:
      - ./docker/mocks/spotify:/home/wiremock
    networks:
      - focushive-e2e-network
    ports:
      - "8090:8080"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/__admin/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  email-mock:
    image: mailhog/mailhog:v1.0.1
    container_name: email-mock
    networks:
      - focushive-e2e-network
    ports:
      - "8025:8025"  # Web UI
      - "1025:1025"  # SMTP
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8025"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===== FOCUSHIVE MICROSERVICES =====

  # Identity Service (OAuth2 Provider)
  identity-service:
    build:
      context: ./services/identity-service
      dockerfile: Dockerfile
    container_name: identity-service-e2e
    environment:
      # Database
      DB_HOST: test-db
      DB_PORT: 5432
      DB_NAME: identity_test
      DB_USER: test_user
      DB_PASSWORD: test_pass
      # Redis
      REDIS_HOST: test-redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: test_redis_pass
      # Security (Test keys - NOT for production)
      KEY_STORE_PASSWORD: test_keystore
      PRIVATE_KEY_PASSWORD: test_private_key
      FOCUSHIVE_CLIENT_SECRET: test_client_secret
      # CORS - Allow all for E2E tests
      CORS_ORIGINS: "*"
      # Application
      SERVER_PORT: 8081
      LOG_LEVEL: DEBUG
      SHOW_SQL: "true"
      PROFILE: test
    networks:
      - focushive-e2e-network
    ports:
      - "8081:8081"
    depends_on:
      test-db:
        condition: service_healthy
      test-redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 30s

  # FocusHive Backend (Core Service)
  focushive-backend:
    build:
      context: ./services/focushive-backend
      dockerfile: Dockerfile
    container_name: focushive-backend-e2e
    environment:
      # Database
      DB_HOST: test-db
      DB_PORT: 5432
      DB_NAME: focushive_test
      DB_USER: test_user
      DB_PASSWORD: test_pass
      # Redis
      REDIS_HOST: test-redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: test_redis_pass
      # Identity Service
      IDENTITY_SERVICE_URL: http://identity-service:8081
      # Application
      SERVER_PORT: 8080
      JWT_SECRET: test_jwt_secret_key_for_e2e_testing_only
      JWT_EXPIRATION: 86400000
      LOG_LEVEL: DEBUG
      SHOW_SQL: "true"
      PROFILE: test
      # CORS - Allow all for E2E tests
      CORS_ORIGINS: "*"
    networks:
      - focushive-e2e-network
    ports:
      - "8080:8080"
    depends_on:
      test-db:
        condition: service_healthy
      test-redis:
        condition: service_healthy
      identity-service:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 45s

  # Music Service (Spotify Integration)
  music-service:
    build:
      context: ./services/music-service
      dockerfile: Dockerfile
    container_name: music-service-e2e
    environment:
      DB_HOST: test-db
      DB_PORT: 5432
      DB_NAME: music_test
      DB_USER: test_user
      DB_PASSWORD: test_pass
      REDIS_HOST: test-redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: test_redis_pass
      IDENTITY_SERVICE_URL: http://identity-service:8081
      SPOTIFY_API_URL: http://spotify-mock:8080  # Use mock
      SERVER_PORT: 8082
      PROFILE: test
      LOG_LEVEL: DEBUG
    networks:
      - focushive-e2e-network
    ports:
      - "8082:8082"
    depends_on:
      test-db:
        condition: service_healthy
      test-redis:
        condition: service_healthy
      identity-service:
        condition: service_healthy
      spotify-mock:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8082/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  # Notification Service
  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    container_name: notification-service-e2e
    environment:
      DB_HOST: test-db
      DB_PORT: 5432
      DB_NAME: notification_test
      DB_USER: test_user
      DB_PASSWORD: test_pass
      REDIS_HOST: test-redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: test_redis_pass
      IDENTITY_SERVICE_URL: http://identity-service:8081
      # Email Mock Configuration
      SMTP_HOST: email-mock
      SMTP_PORT: 1025
      SMTP_USER: test
      SMTP_PASSWORD: test
      SMTP_FROM: test@focushive.app
      SERVER_PORT: 8083
      PROFILE: test
      LOG_LEVEL: DEBUG
    networks:
      - focushive-e2e-network
    ports:
      - "8083:8083"
    depends_on:
      test-db:
        condition: service_healthy
      test-redis:
        condition: service_healthy
      identity-service:
        condition: service_healthy
      email-mock:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8083/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  # Chat Service
  chat-service:
    build:
      context: ./services/chat-service
      dockerfile: Dockerfile
    container_name: chat-service-e2e
    environment:
      DB_HOST: test-db
      DB_PORT: 5432
      DB_NAME: chat_test
      DB_USER: test_user
      DB_PASSWORD: test_pass
      REDIS_HOST: test-redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: test_redis_pass
      IDENTITY_SERVICE_URL: http://identity-service:8081
      SERVER_PORT: 8084
      PROFILE: test
      LOG_LEVEL: DEBUG
    networks:
      - focushive-e2e-network
    ports:
      - "8084:8084"
    depends_on:
      test-db:
        condition: service_healthy
      test-redis:
        condition: service_healthy
      identity-service:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8084/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  # Analytics Service
  analytics-service:
    build:
      context: ./services/analytics-service
      dockerfile: Dockerfile
    container_name: analytics-service-e2e
    environment:
      DB_HOST: test-db
      DB_PORT: 5432
      DB_NAME: analytics_test
      DB_USER: test_user
      DB_PASSWORD: test_pass
      REDIS_HOST: test-redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: test_redis_pass
      IDENTITY_SERVICE_URL: http://identity-service:8081
      SERVER_PORT: 8085
      PROFILE: test
      LOG_LEVEL: DEBUG
    networks:
      - focushive-e2e-network
    ports:
      - "8085:8085"
    depends_on:
      test-db:
        condition: service_healthy
      test-redis:
        condition: service_healthy
      identity-service:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8085/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  # Forum Service
  forum-service:
    build:
      context: ./services/forum-service
      dockerfile: Dockerfile
    container_name: forum-service-e2e
    environment:
      DB_HOST: test-db
      DB_PORT: 5432
      DB_NAME: forum_test
      DB_USER: test_user
      DB_PASSWORD: test_pass
      REDIS_HOST: test-redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: test_redis_pass
      IDENTITY_SERVICE_URL: http://identity-service:8081
      SERVER_PORT: 8086
      PROFILE: test
      LOG_LEVEL: DEBUG
    networks:
      - focushive-e2e-network
    ports:
      - "8086:8086"
    depends_on:
      test-db:
        condition: service_healthy
      test-redis:
        condition: service_healthy
      identity-service:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8086/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  # Buddy Service
  buddy-service:
    build:
      context: ./services/buddy-service
      dockerfile: Dockerfile
    container_name: buddy-service-e2e
    environment:
      DB_HOST: test-db
      DB_PORT: 5432
      DB_NAME: buddy_test
      DB_USER: test_user
      DB_PASSWORD: test_pass
      REDIS_HOST: test-redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: test_redis_pass
      IDENTITY_SERVICE_URL: http://identity-service:8081
      SERVER_PORT: 8087
      PROFILE: test
      LOG_LEVEL: DEBUG
    networks:
      - focushive-e2e-network
    ports:
      - "8087:8087"
    depends_on:
      test-db:
        condition: service_healthy
      test-redis:
        condition: service_healthy
      identity-service:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8087/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  # ===== FRONTEND FOR E2E TESTING =====
  
  frontend-e2e:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
      args:
        VITE_API_BASE_URL: http://localhost:8080/api
        VITE_WEBSOCKET_URL: ws://localhost:8080/ws
        VITE_IDENTITY_SERVICE_URL: http://localhost:8081
        VITE_MUSIC_SERVICE_URL: http://localhost:8082
        VITE_NOTIFICATION_SERVICE_URL: http://localhost:8083
        VITE_CHAT_SERVICE_URL: http://localhost:8084
        VITE_ANALYTICS_SERVICE_URL: http://localhost:8085
        VITE_FORUM_SERVICE_URL: http://localhost:8086
        VITE_BUDDY_SERVICE_URL: http://localhost:8087
        VITE_ENABLE_ANALYTICS: "false"
        VITE_ENVIRONMENT: "e2e"
    container_name: frontend-e2e
    networks:
      - focushive-e2e-network
    ports:
      - "3000:80"
    depends_on:
      focushive-backend:
        condition: service_healthy
      identity-service:
        condition: service_healthy
      music-service:
        condition: service_healthy
      notification-service:
        condition: service_healthy
      chat-service:
        condition: service_healthy
      analytics-service:
        condition: service_healthy
      forum-service:
        condition: service_healthy
      buddy-service:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 15s

  # ===== TEST DATA SEEDING =====
  
  test-data-seeder:
    image: postgres:16-alpine
    container_name: test-data-seeder
    networks:
      - focushive-e2e-network
    depends_on:
      frontend-e2e:
        condition: service_healthy
    volumes:
      - ./docker/test-data:/test-data
    environment:
      PGPASSWORD: test_pass
    command: |
      sh -c "
        echo 'Waiting for all services to be ready...'
        sleep 30
        echo 'Seeding test data...'
        psql -h test-db -U test_user -d focushive_test -f /test-data/seed-users.sql
        psql -h test-db -U test_user -d focushive_test -f /test-data/seed-hives.sql
        psql -h test-db -U test_user -d identity_test -f /test-data/seed-oauth-clients.sql
        echo 'Test data seeding completed!'
      "

volumes:
  test_db_data:
    name: focushive-e2e-db-data
  test_redis_data:
    name: focushive-e2e-redis-data

networks:
  focushive-e2e-network:
    driver: bridge
    name: focushive-e2e-network

# ===================================================================
# USAGE:
# 
# Start E2E environment:
#   docker-compose -f docker-compose.e2e.yml up -d
#
# Run E2E tests:
#   cd frontend && npm run test:e2e
#
# Clean up:
#   docker-compose -f docker-compose.e2e.yml down -v
#
# Debug services:
#   docker-compose -f docker-compose.e2e.yml logs <service-name>
# ===================================================================