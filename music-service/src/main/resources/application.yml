spring:
  application:
    name: focushive-music-service
  
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:focushive}?currentSchema=music
    username: ${DB_USER:focushive_user}
    password: ${DB_PASSWORD:focushive_pass}
    driver-class-name: org.postgresql.Driver
  
  jpa:
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        default_schema: music
    show-sql: ${SHOW_SQL:false}
  
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
    schemas: music
  
  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:focushive_pass}
    database: 2  # Use separate Redis database for music service
    timeout: ${REDIS_TIMEOUT:5000ms}
    lettuce:
      pool:
        max-active: ${REDIS_MAX_ACTIVE:50}
        max-idle: ${REDIS_MAX_IDLE:10}
        min-idle: ${REDIS_MIN_IDLE:5}
        max-wait: ${REDIS_MAX_WAIT:10000ms}

  # Cache configuration
  cache:
    type: redis
    cache-names: 
      - music:recommendations
      - music:user:preferences
      - music:analytics
      - music:feedback
      - music:history
      - music:spotify:tracks
      - music:collaborative
      - music:sessions
      - music:algorithms
    redis:
      time-to-live: 1h
      cache-null-values: false
      key-prefix: "focushive:music:"
      use-key-prefix: true
      enable-statistics: true
  
  cloud:
    openfeign:
      client:
        config:
          default:
            connectTimeout: 5000
            readTimeout: 5000
            loggerLevel: basic
  
  # Circuit breaker configuration for inter-service communication
  circuitbreaker:
    instances:
      user-service:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 5s
        failureRateThreshold: 50
        slowCallRateThreshold: 80
        slowCallDurationThreshold: 3s
      hive-service:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 5s
        failureRateThreshold: 50
        slowCallRateThreshold: 80
        slowCallDurationThreshold: 3s
      analytics-service:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 5s
        failureRateThreshold: 50
        slowCallRateThreshold: 80
        slowCallDurationThreshold: 3s

# Inter-service communication configuration
services:
  identity-service:
    url: ${IDENTITY_SERVICE_URL:http://localhost:8081}
    api-key: ${IDENTITY_SERVICE_API_KEY:}
  user-service:
    url: ${USER_SERVICE_URL:http://localhost:8082}
    api-key: ${USER_SERVICE_API_KEY:}
  hive-service:
    url: ${HIVE_SERVICE_URL:http://localhost:8083}
    api-key: ${HIVE_SERVICE_API_KEY:}
  session-service:
    url: ${SESSION_SERVICE_URL:http://localhost:8085}
    api-key: ${SESSION_SERVICE_API_KEY:}
  analytics-service:
    url: ${ANALYTICS_SERVICE_URL:http://localhost:8086}
    api-key: ${ANALYTICS_SERVICE_API_KEY:}

# Spotify integration configuration
spotify:
  client-id: ${SPOTIFY_CLIENT_ID:}
  client-secret: ${SPOTIFY_CLIENT_SECRET:}
  redirect-uri: ${SPOTIFY_REDIRECT_URI:http://localhost:8084/api/music/spotify/callback}
  api-url: https://api.spotify.com/v1
  accounts-url: https://accounts.spotify.com
  encryption-key: ${SPOTIFY_ENCRYPTION_KEY:}
  api:
    timeout:
      connect: 5000
      read: 10000
    rate-limit:
      requests-per-second: 100
      burst-capacity: 200

# JWT Configuration
jwt:
  # Use same secret as identity service for token validation
  secret: ${JWT_SECRET:thisisaverylongsecretkeythatshouldbeatleast256bitslongforsecurity}
  issuer: identity-service
  public-key-endpoint: ${IDENTITY_SERVICE_URL:http://localhost:8081}/auth/public-key

# CORS Configuration
cors:
  allowed-origins: ${CORS_ORIGINS:http://localhost:3000,http://localhost:5173}
  allowed-methods: GET,POST,PUT,DELETE,OPTIONS,PATCH
  allowed-headers: "*"
  allow-credentials: true
  max-age: 3600

# Application configuration
app:
  version: ${APP_VERSION:1.0.0}
  music:
    recommendation:
      cache-ttl: ${MUSIC_CACHE_TTL:3600} # 1 hour in seconds
      max-recommendations: ${MAX_RECOMMENDATIONS:20}
      algorithm-version: "v2.1.0"
      weights:
        productivity: ${WEIGHT_PRODUCTIVITY:0.4}
        user-preference: ${WEIGHT_USER_PREFERENCE:0.3}
        task-mood-alignment: ${WEIGHT_TASK_MOOD:0.2}
        diversity: ${WEIGHT_DIVERSITY:0.1}
      batch:
        max-feedback-entries: ${MAX_BATCH_FEEDBACK:50}
        processing-timeout: ${BATCH_TIMEOUT:30s}
      analytics:
        min-sample-size: ${MIN_ANALYTICS_SAMPLES:5}
        confidence-threshold: ${CONFIDENCE_THRESHOLD:0.7}
        trend-period-days: ${TREND_PERIOD:30}
    playlist:
      max-size: ${MAX_PLAYLIST_SIZE:500}
      collaborative-max-contributors: ${MAX_CONTRIBUTORS:50}
    session:
      max-duration: ${MAX_SESSION_DURATION:480} # 8 hours in minutes
    cache:
      # Custom cache TTL settings for different data types
      default-ttl: 30m
      recommendation-ttl: 1h
      user-preferences-ttl: 6h
      analytics-ttl: 30m
      feedback-ttl: 2h
      history-ttl: 4h
      spotify-data-ttl: 24h
      collaborative-ttl: 15m
      session-ttl: 8h
      algorithm-ttl: 12h

server:
  port: ${SERVER_PORT:8084}
  error:
    include-message: always
    include-binding-errors: always

springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html

logging:
  level:
    com.focushive.music: ${LOG_LEVEL:INFO}
    org.springframework.web: ${LOG_LEVEL:INFO}
    org.springframework.security: ${LOG_LEVEL:INFO}
    feign: ${FEIGN_LOG_LEVEL:DEBUG}
  pattern:
    level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"

# Distributed Tracing Configuration
management:
  tracing:
    sampling:
      probability: ${TRACING_SAMPLING_PROBABILITY:1.0}
  zipkin:
    tracing:
      endpoint: ${ZIPKIN_ENDPOINT:http://localhost:9411/api/v2/spans}
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,httptrace
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        "[http.server.requests]": true
      percentiles:
        "[http.server.requests]": 0.5,0.95,0.99
    web:
      server:
        request:
          autotime:
            enabled: true

# Feign configuration
feign:
  circuitbreaker:
    enabled: true
  client:
    config:
      user-service:
        connectTimeout: 5000
        readTimeout: 10000
        loggerLevel: full
      hive-service:
        connectTimeout: 5000
        readTimeout: 10000
        loggerLevel: full
      analytics-service:
        connectTimeout: 5000
        readTimeout: 10000
        loggerLevel: full

# Comprehensive Resilience4j Configuration
resilience4j:
  circuitbreaker:
    instances:
      user-service:
        registerHealthIndicator: true
        slidingWindowSize: 20
        minimumNumberOfCalls: 10
        permittedNumberOfCallsInHalfOpenState: 5
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 10s
        failureRateThreshold: 60
        slowCallRateThreshold: 80
        slowCallDurationThreshold: 3s
      hive-service:
        registerHealthIndicator: true
        slidingWindowSize: 20
        minimumNumberOfCalls: 10
        permittedNumberOfCallsInHalfOpenState: 5
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 10s
        failureRateThreshold: 60
        slowCallRateThreshold: 80
        slowCallDurationThreshold: 3s
      analytics-service:
        registerHealthIndicator: true
        slidingWindowSize: 20
        minimumNumberOfCalls: 10
        permittedNumberOfCallsInHalfOpenState: 5
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 10s
        failureRateThreshold: 60
        slowCallRateThreshold: 80
        slowCallDurationThreshold: 3s
  
  retry:
    instances:
      user-service:
        maxAttempts: 3
        waitDuration: 1s
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2
      hive-service:
        maxAttempts: 3
        waitDuration: 1s
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2
      analytics-service:
        maxAttempts: 3
        waitDuration: 1s
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2
  
  timelimiter:
    instances:
      user-service:
        timeoutDuration: 10s
        cancelRunningFuture: true
      hive-service:
        timeoutDuration: 10s
        cancelRunningFuture: true
      analytics-service:
        timeoutDuration: 10s
        cancelRunningFuture: true
  
  ratelimiter:
    instances:
      user-service:
        registerHealthIndicator: true
        limitRefreshPeriod: 1s
        limitForPeriod: 100
        timeoutDuration: 0s
      hive-service:
        registerHealthIndicator: true
        limitRefreshPeriod: 1s
        limitForPeriod: 100
        timeoutDuration: 0s
      analytics-service:
        registerHealthIndicator: true
        limitRefreshPeriod: 1s
        limitForPeriod: 100
        timeoutDuration: 0s
  
  bulkhead:
    instances:
      user-service:
        maxConcurrentCalls: 50
        maxWaitDuration: 1s
      hive-service:
        maxConcurrentCalls: 50
        maxWaitDuration: 1s
      analytics-service:
        maxConcurrentCalls: 50
        maxWaitDuration: 1s