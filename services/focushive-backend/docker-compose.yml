version: '3.8'

services:
  # FocusHive Backend Application
  focushive-backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: focushive-backend
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-dev}
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/focushive
      - SPRING_DATASOURCE_USERNAME=${DB_USERNAME:-focushive}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD:-focushive123}
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - SPRING_DATA_REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - JWT_SECRET=${JWT_SECRET:-your-secret-key-here-should-be-at-least-256-bits-long-in-production}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:5173}
      - IDENTITY_SERVICE_URL=${IDENTITY_SERVICE_URL:-http://identity-service:8081}
      - JAVA_OPTS=-Xmx512m -Xms256m -XX:+UseG1GC
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - focushive-shared-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    volumes:
      - app-logs:/app/logs
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: focushive-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME:-focushive}
      - POSTGRES_USER=${DB_USERNAME:-focushive}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-focushive123}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --locale=en_US.UTF-8
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql/init:/docker-entrypoint-initdb.d
    networks:
      - focushive-shared-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-focushive} -d ${DB_NAME:-focushive}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: focushive-redis
    restart: unless-stopped
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      ${REDIS_PASSWORD:+--requirepass $REDIS_PASSWORD}
    volumes:
      - redis-data:/data
      - redis-conf:/usr/local/etc/redis/
    networks:
      - focushive-shared-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Identity Service (if running separately)
  identity-service:
    image: focushive/identity-service:latest
    container_name: focushive-identity
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-dev}
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/identity
      - SPRING_DATASOURCE_USERNAME=${DB_USERNAME:-focushive}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD:-focushive123}
      - JWT_SECRET=${JWT_SECRET:-your-secret-key-here-should-be-at-least-256-bits-long-in-production}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - focushive-shared-network
    profiles:
      - identity

  # Nginx Reverse Proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: focushive-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - focushive-backend
    networks:
      - focushive-shared-network
    profiles:
      - production

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: focushive-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - focushive-shared-network
    profiles:
      - monitoring

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: focushive-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - focushive-shared-network
    profiles:
      - monitoring

volumes:
  postgres-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  redis-data:
    driver: local
  redis-conf:
    driver: local
  app-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  focushive-shared-network:
    driver: bridge
    name: focushive-shared-network
    ipam:
      config:
        - subnet: 172.20.0.0/16