# Production Configuration for FocusHive Backend
# This configuration optimizes for security, performance, and production readiness

logging:
  level:
    # Application logging
    com.focushive: INFO
    root: WARN
    
    # Spring framework - minimal logging in production
    org.springframework.web: WARN
    org.springframework.security: WARN
    org.springframework.data: WARN
    
    # External libraries - minimal logging
    feign: NONE
    org.hibernate.SQL: WARN
    org.hibernate.type.descriptor.sql.BasicBinder: WARN
    org.apache.kafka: WARN
    org.postgresql: ERROR
    
    # Redis - error only
    org.springframework.data.redis: ERROR
    
    # Rate limiting
    com.focushive.ratelimit: INFO
    
  pattern:
    # Production logging pattern with correlation IDs
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{correlationId:-}] %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{correlationId:-}] %logger{36} - %msg%n"

# Production Database Configuration
spring:
  # PostgreSQL Production DataSource Configuration
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:focushive}
    username: ${DB_USERNAME:focushive_user}
    password: ${DB_PASSWORD:focushive_pass}
    driver-class-name: org.postgresql.Driver
    
    # HikariCP Production Connection Pool Settings
    hikari:
      # Connection Pool Sizing
      minimum-idle: 10              # Minimum idle connections in pool
      maximum-pool-size: 30         # Maximum connections in pool
      
      # Timeout Settings (all in milliseconds)
      connection-timeout: 30000     # 30 seconds - time to wait for connection
      idle-timeout: 600000          # 10 minutes - idle connection eviction time
      max-lifetime: 1800000         # 30 minutes - maximum connection lifetime
      
      # Leak Detection and Monitoring
      leak-detection-threshold: 60000  # 60 seconds - warn if connection held longer
      
      # Connection Validation
      connection-test-query: SELECT 1
      validation-timeout: 5000      # 5 seconds - validation timeout
      
      # Pool Naming for JMX/Monitoring
      pool-name: FocusHive-HikariCP-Production
      
      # PostgreSQL-specific optimizations
      data-source-properties:
        # Prepared Statement Caching
        preparedStatementCacheSize: 256
        preparedStatementCacheSqlLimit: 2048
        
        # Default Transaction Isolation
        defaultTransactionIsolation: TRANSACTION_READ_COMMITTED
        
        # TCP settings for better performance
        tcpKeepAlive: true
        socketTimeout: 0              # No socket timeout (rely on connection-timeout)
        
        # Application name for PostgreSQL connection tracking
        ApplicationName: FocusHive-Backend-Production
        
        # SSL Configuration (enable in production)
        ssl: ${DB_SSL_ENABLED:true}
        sslmode: ${DB_SSL_MODE:require}
        
        # Performance tuning
        reWriteBatchedInserts: true   # Optimize batch inserts
        defaultRowFetchSize: 1000     # Fetch size for large result sets
  
  # JPA Production Settings  
  jpa:
    show-sql: false
    hibernate:
      ddl-auto: validate              # Only validate schema, don't auto-create
      naming:
        physical-strategy: org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy
        implicit-strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl
    properties:
      hibernate:
        # PostgreSQL-specific dialect
        dialect: org.hibernate.dialect.PostgreSQLDialect
        
        # SQL Settings
        format_sql: false
        use_sql_comments: false
        show_sql: false
        
        # Performance Optimizations
        jdbc:
          batch_size: 25              # Batch size for inserts/updates
          batch_versioned_data: true  # Batch versioned data
          fetch_size: 50              # Default fetch size
          use_streams_for_binary: true
        order_inserts: true           # Order inserts for better batching
        order_updates: true           # Order updates for better batching
        
        # Connection Pool Integration
        connection:
          provider_disables_autocommit: true  # Let HikariCP manage autocommit
        
        # Second Level Cache (disabled for production safety)
        cache:
          use_second_level_cache: false
          use_query_cache: false
        
        # Statistics and Monitoring (disabled in production)
        generate_statistics: false
        
        # Schema Validation
        hbm2ddl:
          auto: validate
        
        # PostgreSQL-specific settings
        temp:
          use_jdbc_metadata_defaults: false
  
  # Flyway Configuration for Production
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: false        # Don't baseline in production
    validate-on-migrate: true         # Always validate migrations
    out-of-order: false               # Strict migration ordering
    clean-disabled: true              # Never allow clean in production
    
    # Connection settings (use separate flyway user in production)
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:focushive}
    user: ${FLYWAY_USERNAME:${DB_USERNAME:focushive_user}}
    password: ${FLYWAY_PASSWORD:${DB_PASSWORD:focushive_pass}}
    
    # Production migration settings
    mixed: false                      # Don't allow mixing SQL and Java migrations
    group: true                       # Group migrations in single transaction where possible
        
# Feign Production Settings
feign:
  client:
    config:
      default:
        loggerLevel: none
      identity-service:
        loggerLevel: none

# Management endpoints - restrict in production
management:
  endpoints:
    web:
      exposure:
        # Only expose essential endpoints in production
        include: health,info,metrics,prometheus
  endpoint:
    health:
      # Don't show details in production for security
      show-details: when_authorized
      roles: ADMIN
  metrics:
    export:
      prometheus:
        enabled: true

# Production Rate Limiting Configuration
focushive:
  rate-limit:
    enabled: true
    use-redis: true  # Use Redis for distributed rate limiting in production
    # Stricter limits for production
    public-api-requests-per-hour: 60         # 1 per minute for unauthenticated
    authenticated-api-requests-per-hour: 600  # 10 per minute for authenticated
    admin-api-requests-per-hour: 6000        # 100 per minute for admin
    websocket-connections-per-minute: 20     # Limit WebSocket connections
    burst-capacity: 10                       # Lower burst in production
    burst-refill-duration: PT30S             # 30 seconds refill
    bucket-ttl: PT1H                         # 1 hour TTL for buckets
    metrics-enabled: true
    # Add IP whitelist for internal services
    whitelisted-ips: ${RATE_LIMIT_WHITELIST:}
    excluded-endpoints:
      - /actuator/health
      - /actuator/health/liveness
      - /actuator/health/readiness
      - /actuator/metrics
      - /actuator/prometheus