# Staging Configuration for FocusHive Backend
# This profile mimics production settings but with more observability for testing

spring:
  # Staging Database - use PostgreSQL but with staging credentials
  datasource:
    url: jdbc:postgresql://${STAGING_DB_HOST:localhost}:${STAGING_DB_PORT:5432}/${STAGING_DB_NAME:focushive_staging}
    username: ${STAGING_DB_USERNAME:focushive_staging_user}
    password: ${STAGING_DB_PASSWORD}  # REQUIRED: Must be set for staging
    driver-class-name: org.postgresql.Driver

    # Connection pool settings - smaller than production
    hikari:
      minimum-idle: 5
      maximum-pool-size: 15
      connection-timeout: 30000
      idle-timeout: 300000  # 5 minutes
      max-lifetime: 900000  # 15 minutes
      leak-detection-threshold: 60000
      connection-test-query: SELECT 1
      pool-name: FocusHive-HikariCP-Staging

      # Staging-specific optimizations
      data-source-properties:
        preparedStatementCacheSize: 128
        preparedStatementCacheSqlLimit: 1024
        tcpKeepAlive: true
        ApplicationName: FocusHive-Backend-Staging
        ssl: ${STAGING_DB_SSL_ENABLED:false}
        sslmode: ${STAGING_DB_SSL_MODE:prefer}

  # JPA Staging Settings - more verbose than production
  jpa:
    show-sql: ${STAGING_SHOW_SQL:false}
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: ${STAGING_FORMAT_SQL:true}
        use_sql_comments: ${STAGING_USE_SQL_COMMENTS:true}
        jdbc:
          batch_size: 20
          batch_versioned_data: true
        order_inserts: true
        order_updates: true
        cache:
          use_second_level_cache: false
          use_query_cache: false

  # Flyway Staging Configuration
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: false
    validate-on-migrate: true
    out-of-order: false
    clean-disabled: true  # Never allow clean in staging

    # Staging database connection
    url: jdbc:postgresql://${STAGING_DB_HOST:localhost}:${STAGING_DB_PORT:5432}/${STAGING_DB_NAME:focushive_staging}
    user: ${STAGING_FLYWAY_USERNAME:${STAGING_DB_USERNAME:focushive_staging_user}}
    password: ${STAGING_FLYWAY_PASSWORD:${STAGING_DB_PASSWORD}}

  # Redis Staging Configuration
  redis:
    host: ${STAGING_REDIS_HOST:localhost}
    port: ${STAGING_REDIS_PORT:6379}
    password: ${STAGING_REDIS_PASSWORD}  # REQUIRED: Must be set for staging

# Staging-specific logging - more detailed than production
logging:
  level:
    com.focushive: ${STAGING_LOG_LEVEL:INFO}
    org.springframework.web: INFO
    org.springframework.security: INFO
    org.springframework.data: INFO
    feign: INFO
    org.hibernate.SQL: ${STAGING_HIBERNATE_LOG:WARN}
    org.hibernate.type.descriptor.sql.BasicBinder: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{correlationId:-}] [STAGING] %logger{36} - %msg%n"

# Management endpoints - more open than production for testing
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,env,loggers
  endpoint:
    health:
      show-details: always  # Show all health details in staging
  metrics:
    export:
      prometheus:
        enabled: true

# Staging Rate Limiting - more lenient than production
focushive:
  rate-limit:
    enabled: ${STAGING_RATE_LIMIT_ENABLED:true}
    use-redis: ${STAGING_RATE_LIMIT_USE_REDIS:true}
    # More lenient limits for testing
    public-api-requests-per-hour: 300      # 5 per minute
    authenticated-api-requests-per-hour: 3000  # 50 per minute
    admin-api-requests-per-hour: 18000     # 300 per minute
    websocket-connections-per-minute: 60
    burst-capacity: 20
    burst-refill-duration: PT1M
    bucket-ttl: PT2H
    metrics-enabled: true
    whitelisted-ips: ${STAGING_RATE_LIMIT_WHITELIST:}

# Application features - enable most for testing
app:
  version: ${APP_VERSION:1.0.0-staging}
  features:
    forum:
      enabled: ${STAGING_FEATURE_FORUM:true}
    buddy:
      enabled: ${STAGING_FEATURE_BUDDY:true}
    analytics:
      enabled: ${STAGING_FEATURE_ANALYTICS:true}
    authentication:
      enabled: ${STAGING_FEATURE_AUTH:true}
    authController:
      enabled: ${STAGING_FEATURE_AUTH_CONTROLLER:true}
    redis:
      enabled: ${STAGING_FEATURE_REDIS:true}
    health:
      enabled: ${STAGING_FEATURE_HEALTH:true}

# Identity Service Configuration for Staging
identity:
  service:
    url: ${STAGING_IDENTITY_SERVICE_URL:http://localhost:8081}
    connect-timeout: ${STAGING_IDENTITY_SERVICE_CONNECT_TIMEOUT:5000}
    read-timeout: ${STAGING_IDENTITY_SERVICE_READ_TIMEOUT:10000}
    api-key: ${STAGING_IDENTITY_SERVICE_API_KEY:}

# JWT Configuration - shorter expiration for testing
spring:
  security:
    jwt:
      secret: ${STAGING_JWT_SECRET}  # REQUIRED: Must be set for staging
      expiration: ${STAGING_JWT_EXPIRATION:3600000}  # 1 hour for staging
      refresh-expiration: ${STAGING_JWT_REFRESH_EXPIRATION:86400000}  # 1 day for staging

# Server Configuration
server:
  port: ${STAGING_SERVER_PORT:8080}
  error:
    include-message: always
    include-binding-errors: always

# Resilience4j Configuration - more forgiving in staging
resilience4j:
  circuitbreaker:
    instances:
      identity-service:
        registerHealthIndicator: true
        slidingWindowSize: 15
        minimumNumberOfCalls: 8
        permittedNumberOfCallsInHalfOpenState: 4
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 30s  # Longer wait for staging
        failureRateThreshold: 70      # More forgiving threshold
        slowCallRateThreshold: 80
        slowCallDurationThreshold: 5s  # More lenient timeout

  retry:
    instances:
      identity-service:
        maxAttempts: 3
        waitDuration: 2s
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2

# Distributed Tracing - full sampling in staging
management:
  tracing:
    sampling:
      probability: ${STAGING_TRACING_SAMPLING:1.0}  # 100% sampling in staging
  zipkin:
    tracing:
      endpoint: ${STAGING_ZIPKIN_ENDPOINT:http://localhost:9411/api/v2/spans}