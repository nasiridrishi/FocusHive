package com.focushive.buddy.entity;

import com.focushive.user.entity.User;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager;
import org.springframework.test.context.TestPropertySource;

import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * Integration test for BuddyPreferences entity with H2 database.
 * This test validates that the JSON and array mappings work correctly with H2.
 */
@DataJpaTest
@TestPropertySource(locations = "classpath:application-test.yml")
class BuddyPreferencesIntegrationTest {

    @Autowired
    private TestEntityManager entityManager;

    private User testUser;

    @BeforeEach
    void setUp() {
        // Create a test user with all required fields
        testUser = new User();
        // Don't set ID manually - let it be generated by UUID strategy
        testUser.setEmail("test@example.com");
        testUser.setUsername("testuser");
        testUser.setDisplayName("Test User");
        testUser.setPassword("testpassword123");
        // Set timezone and locale with proper formats to satisfy validation
        testUser.setTimezone("UTC");
        testUser.setLocale("en-US");
        // Set default UserRole if not set by constructor
        testUser.setRole(User.UserRole.USER);
        // Manually set timestamps since JPA auditing might not be working in tests
        testUser.setCreatedAt(java.time.LocalDateTime.now());
        testUser.setUpdatedAt(java.time.LocalDateTime.now());
        
        entityManager.persistAndFlush(testUser);
        entityManager.clear();
    }

    @Test
    void shouldPersistAndRetrieveBuddyPreferencesWithJsonbWorkHours() {
        // Given
        Map<String, BuddyPreferences.WorkHours> workHours = Map.of(
                "MONDAY", new BuddyPreferences.WorkHours(9, 17),
                "TUESDAY", new BuddyPreferences.WorkHours(10, 18),
                "WEDNESDAY", new BuddyPreferences.WorkHours(9, 16)
        );

        BuddyPreferences preferences = BuddyPreferences.builder()
                .user(testUser)
                .preferredTimezone("America/New_York")
                .preferredWorkHours(workHours)
                .focusAreas(new String[]{"coding", "reading", "writing"})
                .communicationStyle(BuddyPreferences.CommunicationStyle.MODERATE)
                .matchingEnabled(true)
                .build();

        // When
        BuddyPreferences savedPreferences = entityManager.persistAndFlush(preferences);
        entityManager.clear();

        // Then
        BuddyPreferences retrievedPreferences = entityManager.find(BuddyPreferences.class, savedPreferences.getId());
        
        assertThat(retrievedPreferences).isNotNull();
        assertThat(retrievedPreferences.getUser().getId()).isEqualTo(testUser.getId());
        assertThat(retrievedPreferences.getPreferredTimezone()).isEqualTo("America/New_York");
        
        // Verify work hours JSONB mapping works correctly
        Map<String, BuddyPreferences.WorkHours> retrievedWorkHours = retrievedPreferences.getPreferredWorkHours();
        assertThat(retrievedWorkHours).hasSize(3);
        assertThat(retrievedWorkHours.get("MONDAY")).isEqualTo(new BuddyPreferences.WorkHours(9, 17));
        assertThat(retrievedWorkHours.get("TUESDAY")).isEqualTo(new BuddyPreferences.WorkHours(10, 18));
        assertThat(retrievedWorkHours.get("WEDNESDAY")).isEqualTo(new BuddyPreferences.WorkHours(9, 16));
        
        // Verify focus areas PostgreSQL array mapping works correctly
        assertThat(retrievedPreferences.getFocusAreas()).containsExactlyInAnyOrder("coding", "reading", "writing");
        
        assertThat(retrievedPreferences.getCommunicationStyle()).isEqualTo(BuddyPreferences.CommunicationStyle.MODERATE);
        assertThat(retrievedPreferences.getMatchingEnabled()).isTrue();
    }

    @Test
    void shouldHandleEmptyWorkHoursAndFocusAreas() {
        // Given
        BuddyPreferences preferences = BuddyPreferences.builder()
                .user(testUser)
                .preferredTimezone("UTC")
                .preferredWorkHours(Map.of())
                .focusAreas(new String[]{})
                .communicationStyle(BuddyPreferences.CommunicationStyle.MINIMAL)
                .matchingEnabled(false)
                .build();

        // When
        BuddyPreferences savedPreferences = entityManager.persistAndFlush(preferences);
        entityManager.clear();

        // Then
        BuddyPreferences retrievedPreferences = entityManager.find(BuddyPreferences.class, savedPreferences.getId());
        
        assertThat(retrievedPreferences.getPreferredWorkHours()).isEmpty();
        assertThat(retrievedPreferences.getFocusAreas()).isEmpty();
        assertThat(retrievedPreferences.getMatchingEnabled()).isFalse();
    }

    @Test
    void shouldHandleNullWorkHoursAndFocusAreas() {
        // Given
        BuddyPreferences preferences = BuddyPreferences.builder()
                .user(testUser)
                .preferredTimezone("Europe/London")
                .preferredWorkHours(null)
                .focusAreas(null)
                .communicationStyle(BuddyPreferences.CommunicationStyle.FREQUENT)
                .matchingEnabled(true)
                .build();

        // When
        BuddyPreferences savedPreferences = entityManager.persistAndFlush(preferences);
        entityManager.clear();

        // Then
        BuddyPreferences retrievedPreferences = entityManager.find(BuddyPreferences.class, savedPreferences.getId());
        
        assertThat(retrievedPreferences.getPreferredWorkHours()).isNull();
        assertThat(retrievedPreferences.getFocusAreas()).isNull();
    }

    @Test
    void shouldPersistComplexWorkHoursSchedule() {
        // Given - A complex work schedule covering all weekdays
        Map<String, BuddyPreferences.WorkHours> workHours = Map.of(
                "MONDAY", new BuddyPreferences.WorkHours(8, 16),
                "TUESDAY", new BuddyPreferences.WorkHours(9, 17),
                "WEDNESDAY", new BuddyPreferences.WorkHours(10, 18),
                "THURSDAY", new BuddyPreferences.WorkHours(7, 15),
                "FRIDAY", new BuddyPreferences.WorkHours(9, 14)
        );

        BuddyPreferences preferences = BuddyPreferences.builder()
                .user(testUser)
                .preferredTimezone("Asia/Tokyo")
                .preferredWorkHours(workHours)
                .focusAreas(new String[]{"machine learning", "data science", "python", "research", "mathematics"})
                .communicationStyle(BuddyPreferences.CommunicationStyle.MODERATE)
                .matchingEnabled(true)
                .build();

        // When
        BuddyPreferences savedPreferences = entityManager.persistAndFlush(preferences);
        entityManager.clear();

        // Then
        BuddyPreferences retrievedPreferences = entityManager.find(BuddyPreferences.class, savedPreferences.getId());
        
        // Verify complex JSONB structure
        Map<String, BuddyPreferences.WorkHours> retrieved = retrievedPreferences.getPreferredWorkHours();
        assertThat(retrieved).hasSize(5);
        assertThat(retrieved.get("MONDAY")).isEqualTo(new BuddyPreferences.WorkHours(8, 16));
        assertThat(retrieved.get("TUESDAY")).isEqualTo(new BuddyPreferences.WorkHours(9, 17));
        assertThat(retrieved.get("WEDNESDAY")).isEqualTo(new BuddyPreferences.WorkHours(10, 18));
        assertThat(retrieved.get("THURSDAY")).isEqualTo(new BuddyPreferences.WorkHours(7, 15));
        assertThat(retrieved.get("FRIDAY")).isEqualTo(new BuddyPreferences.WorkHours(9, 14));
        
        // Verify complex array structure
        assertThat(retrievedPreferences.getFocusAreas())
                .containsExactlyInAnyOrder("machine learning", "data science", "python", "research", "mathematics");
    }
}