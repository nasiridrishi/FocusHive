apiVersion: v1
kind: ConfigMap
metadata:
  name: notification-service-config
  namespace: focushive-notification
  labels:
    app.kubernetes.io/name: notification-service
    app.kubernetes.io/component: config
    app.kubernetes.io/part-of: focushive
data:
  application-k8s.yml: |
    server:
      port: 8083
      servlet:
        context-path: /
      
    spring:
      profiles:
        active: prod
      datasource:
        url: jdbc:postgresql://${DB_HOST:postgres-service}:${DB_PORT:5432}/${DB_NAME:focushive_notifications}
        username: ${DB_USERNAME}
        password: ${DB_PASSWORD}
        hikari:
          maximum-pool-size: 20
          minimum-idle: 5
          connection-timeout: 30000
          idle-timeout: 600000
          max-lifetime: 1800000
      
      redis:
        host: ${REDIS_HOST:redis-service}
        port: ${REDIS_PORT:6379}
        password: ${REDIS_PASSWORD}
        timeout: 5000ms
        jedis:
          pool:
            max-active: 20
            max-idle: 8
            min-idle: 0
            max-wait: -1ms
      
      rabbitmq:
        host: ${RABBITMQ_HOST:rabbitmq-service}
        port: ${RABBITMQ_PORT:5672}
        username: ${RABBITMQ_USER}
        password: ${RABBITMQ_PASSWORD}
        connection-timeout: 60000
      
      security:
        oauth2:
          resourceserver:
            jwt:
              issuer-uri: ${JWT_ISSUER_URI}
              jwk-set-uri: ${JWT_JWK_SET_URI}
    
    management:
      endpoints:
        web:
          exposure:
            include: health,info,metrics,prometheus,loggers
          base-path: /actuator
      endpoint:
        health:
          show-details: when-authorized
          show-components: always
        metrics:
          enabled: true
        prometheus:
          enabled: true
      metrics:
        export:
          prometheus:
            enabled: true
            step: 10s
            descriptions: true
        enable:
          all: true
        distribution:
          percentiles-histogram:
            http.server.requests: true
            notifications.processing.time: true
            emails.delivery.time: true
          percentiles:
            http.server.requests: 0.5,0.75,0.95,0.99
            notifications.processing.time: 0.5,0.75,0.95,0.99
          slo:
            http.server.requests: 100ms,250ms,500ms,1s,2s
            notifications.processing.time: 50ms,100ms,250ms,500ms
      observations:
        http:
          server:
            requests:
              name: http_server_requests
        key-values:
          application: notification-service
          environment: kubernetes
      tracing:
        sampling:
          probability: 0.1
        zipkin:
          endpoint: ${ZIPKIN_URL:http://zipkin-service:9411/api/v2/spans}
      health:
        redis:
          enabled: true
        db:
          enabled: true
    
    logging:
      level:
        com.focushive.notification: INFO
        com.focushive.notification.monitoring: DEBUG
        org.springframework.security: WARN
        org.springframework.web: WARN
        org.hibernate.SQL: WARN
        io.micrometer: INFO
        zipkin2: WARN
      pattern:
        console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{correlationId:-},%X{userId:-},%X{operation:-}] %logger{36} - %msg%n"
        file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{correlationId:-},%X{userId:-},%X{operation:-}] %logger{36} - %msg%n"
      file:
        name: /app/logs/notification-service.log
        max-size: 100MB
        max-history: 30
        total-size-cap: 1GB
    
    notification:
      queue:
        name: notifications
        exchange: focushive.notifications
        routing-key: notification.created
      template:
        default-language: en
      cleanup:
        schedule: "0 0 2 * * ?"
        default-retention-days: 30
      delivery:
        max-retries: 3
        retry-delay-ms: 1000
      rate-limit:
        enabled: true
        read-limit: 100
        write-limit: 50
        admin-limit: 20
        unauthenticated-limit: 200
        window-minutes: 1
        redis-key-prefix: "rate_limit:"
        excluded-endpoints:
          - "/actuator/health"
          - "/actuator/info"
          - "/error"
          - "/swagger-ui/**"
          - "/v3/api-docs/**"
      cors:
        allowed-origins: ${CORS_ALLOWED_ORIGINS:*}

  redis.conf: |
    # Redis configuration for Kubernetes
    bind 0.0.0.0
    port 6379
    tcp-backlog 511
    timeout 300
    tcp-keepalive 300
    daemonize no
    supervised no
    pidfile /var/run/redis_6379.pid
    loglevel notice
    logfile ""
    databases 16
    always-show-logo yes
    save 900 1
    save 300 10
    save 60 10000
    stop-writes-on-bgsave-error yes
    rdbcompression yes
    rdbchecksum yes
    dbfilename dump.rdb
    dir /data
    maxmemory 256mb
    maxmemory-policy allkeys-lru
    lazyfree-lazy-eviction no
    lazyfree-lazy-expire no
    lazyfree-lazy-server-del no
    replica-lazy-flush no
    appendonly yes
    appendfilename "appendonly.aof"
    appendfsync everysec
    no-appendfsync-on-rewrite no
    auto-aof-rewrite-percentage 100
    auto-aof-rewrite-min-size 64mb
    aof-load-truncated yes
    aof-use-rdb-preamble yes
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: focushive-notification
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: config
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'focushive-k8s'
        environment: 'production'

    rule_files:
      - /etc/prometheus/alerts.yml

    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager-service:9093

    scrape_configs:
      - job_name: 'notification-service'
        static_configs:
          - targets: ['notification-service:8083']
        metrics_path: '/actuator/prometheus'
        scrape_interval: 10s
        scrape_timeout: 5s

      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
        - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: default;kubernetes;https

      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
        - role: node
        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics

      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
        - role: pod
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: kubernetes_pod_name