apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "notification-service.fullname" . }}-config
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "notification-service.labels" . | nindent 4 }}
data:
  application-k8s.yml: |
    server:
      port: 8083
      servlet:
        context-path: /notification-service/api

    management:
      server:
        port: 8080
      endpoints:
        web:
          exposure:
            include: health,info,metrics,prometheus,loggers,env,threaddump,heapdump
          base-path: /actuator
          path-mapping:
            health: health
            info: info
            metrics: metrics
            prometheus: prometheus
      endpoint:
        health:
          show-details: always
          show-components: always
        metrics:
          enabled: true
        prometheus:
          enabled: true
        shutdown:
          enabled: false
      metrics:
        distribution:
          percentiles-histogram:
            "[http.server.requests]": true
            "[notification.processing.time]": true
          percentiles:
            "[http.server.requests]": "0.5, 0.95, 0.99"
            "[notification.processing.time]": "0.5, 0.95, 0.99"
        export:
          prometheus:
            enabled: true
        web:
          server:
            request:
              autotime:
                enabled: true

    spring:
      application:
        name: notification-service
      profiles:
        active: {{ .Values.config.profiles }}
      
      datasource:
        url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:notification_db}
        username: ${DB_USERNAME:notification_user}
        password: ${DB_PASSWORD}
        driver-class-name: org.postgresql.Driver
        hikari:
          connection-timeout: 20000
          minimum-idle: 5
          maximum-pool-size: 20
          idle-timeout: 600000
          max-lifetime: 1800000

      data:
        redis:
          host: ${REDIS_HOST:localhost}
          port: ${REDIS_PORT:6379}
          password: ${REDIS_PASSWORD:}
          timeout: 2000ms
          lettuce:
            pool:
              max-active: 8
              max-idle: 8
              min-idle: 2
              max-wait: 2000ms

      rabbitmq:
        host: ${RABBITMQ_HOST:localhost}
        port: ${RABBITMQ_PORT:5672}
        username: ${RABBITMQ_USER:guest}
        password: ${RABBITMQ_PASSWORD:guest}
        virtual-host: /
        listener:
          simple:
            retry:
              enabled: true
              initial-interval: 1000
              max-attempts: 3
              max-interval: 10000
              multiplier: 2.0

      security:
        oauth2:
          resourceserver:
            jwt:
              issuer-uri: ${JWT_ISSUER_URI:http://localhost:8081/auth/realms/focushive}
              jwk-set-uri: ${JWT_JWK_SET_URI:http://localhost:8081/auth/realms/focushive/protocol/openid-connect/certs}

      mail:
        host: email-smtp.us-east-1.amazonaws.com
        port: 587
        username: ${AWS_SES_SMTP_USERNAME:}
        password: ${AWS_SES_SMTP_PASSWORD:}
        properties:
          mail:
            smtp:
              auth: true
              starttls:
                enable: true
                required: true

    notification:
      email:
        from: ${EMAIL_FROM:noreply@focushive.com}
        enabled: true
      digest:
        schedule: "0 0 8,20 * * *"
        batch-size: 100
      retry:
        max-attempts: 3
        delay: 1000

    logging:
      level:
        com.uol.focushive.notificationservice: {{ .Values.config.monitoring.logLevel | upper }}
        org.springframework.security: INFO
        org.springframework.web: INFO
        org.hibernate.SQL: {{ .Values.config.database.logSqlQueries | ternary "DEBUG" "INFO" }}
        org.hibernate.type: {{ .Values.config.database.logSqlQueries | ternary "TRACE" "INFO" }}
      pattern:
        console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{correlationId}] %logger{36} - %msg%n"
        file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{correlationId}] %logger{36} - %msg%n"

    cors:
      allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000}
      allowed-methods: GET,POST,PUT,DELETE,PATCH,OPTIONS
      allowed-headers: "*"
      allow-credentials: true

    management:
      tracing:
        sampling:
          probability: {{ .Values.config.monitoring.tracingSamplingProbability }}
        zipkin:
          endpoint: ${ZIPKIN_URL:http://zipkin:9411/api/v2/spans}

    springdoc:
      api-docs:
        path: /api-docs
      swagger-ui:
        path: /swagger-ui.html
        operations-sorter: method
        tags-sorter: alpha