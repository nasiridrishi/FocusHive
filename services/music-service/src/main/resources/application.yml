server:
  port: 8082
  servlet:
    context-path: /api/music

spring:
  application:
    name: music-service
  
  # Database Configuration
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:focushive_music}
    username: ${DB_USER:music_user}
    password: ${DB_PASSWORD}  # REQUIRED: Must be set in environment
    driver-class-name: org.postgresql.Driver
    hikari:
      connection-timeout: 20000
      maximum-pool-size: 10
      minimum-idle: 5
      idle-timeout: 300000
      max-lifetime: 1200000
  
  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: ${SHOW_SQL:false}
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        jdbc:
          time_zone: UTC
  
  # Flyway Migration
  flyway:
    locations: classpath:db/migration
    baseline-on-migrate: true
    validate-on-migrate: true
  
  # Redis Configuration
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD}  # REQUIRED: Must be set in environment
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
  
  # Cache Configuration
  cache:
    type: redis
    redis:
      time-to-live: 300s

# Spotify Configuration
spotify:
  client-id: ${SPOTIFY_CLIENT_ID:}
  client-secret: ${SPOTIFY_CLIENT_SECRET:}
  redirect-uri: ${SPOTIFY_REDIRECT_URI:http://localhost:8082/api/music/spotify/callback}
  scopes: user-read-private,user-read-email,user-library-read,user-top-read,playlist-read-private,playlist-read-collaborative,user-read-playback-state,user-modify-playback-state,streaming

# Music Service Configuration
music:
  recommendation:
    cache-duration: 300s
    max-recommendations: 50
    default-energy-level: 0.6
  ambient:
    enabled: true
    sounds-path: /sounds
    default-volume: 0.5
  session:
    auto-start-music: true
    fade-in-duration: 3s
    fade-out-duration: 2s

# Service URLs
services:
  identity-service:
    url: ${IDENTITY_SERVICE_URL:http://localhost:8081}
  focushive-backend:
    url: ${FOCUSHIVE_BACKEND_URL:http://localhost:8080}

# Security
jwt:
  secret: ${JWT_SECRET}  # REQUIRED: Must be set in environment

# Logging
logging:
  level:
    com.focushive.music: ${LOG_LEVEL:INFO}
    org.springframework.security: WARN
    se.michaelthelin.spotify: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: /app/logs/music-service.log

# Management & Monitoring
management:
  endpoints:
    web:
      exposure:
        include: ${MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE:health,info,metrics}
  endpoint:
    health:
      show-details: ${MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS:when_authorized}
  health:
    circuitbreakers:
      enabled: true
    ratelimiters:
      enabled: true

# OpenAPI Documentation
springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html
    tags-sorter: alpha
    operations-sorter: alpha
  info:
    title: FocusHive Music Service API
    description: Music recommendations, playlist management, and streaming integrations
    version: 1.0.0
    contact:
      name: FocusHive Development Team