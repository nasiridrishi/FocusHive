package com.focushive.identity.controller;

import com.focushive.identity.dto.*;
import com.focushive.identity.service.UserPreferencesService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;
import java.util.UUID;

/**
 * User Preferences Management controller.
 * Provides endpoints for managing user preferences across different personas and contexts.
 */
@Slf4j
//@RestController
//@RequestMapping("/api/v1/preferences")
@Tag(name = "User Preferences", description = "User preferences and settings management per persona")
@SecurityRequirement(name = "JWT")
@RequiredArgsConstructor
public class UserPreferencesController {

    private final UserPreferencesService userPreferencesService;

    @Operation(
            summary = "Get global user preferences",
            description = "Get user preferences that apply across all personas"
    )
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Global preferences retrieved successfully"),
            @ApiResponse(responseCode = "401", description = "Not authenticated"),
            @ApiResponse(responseCode = "404", description = "User not found")
    })
    @GetMapping("/global")
    public ResponseEntity<GlobalPreferencesResponse> getGlobalPreferences(Authentication authentication) {
        log.debug("Global preferences request");
        
        UUID userId = getUserIdFromAuthentication(authentication);
        GlobalPreferencesResponse response = userPreferencesService.getGlobalPreferences(userId);
        return ResponseEntity.ok(response);
    }

    @Operation(
            summary = "Update global user preferences",
            description = "Update user preferences that apply across all personas"
    )
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Global preferences updated successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid preferences data"),
            @ApiResponse(responseCode = "401", description = "Not authenticated"),
            @ApiResponse(responseCode = "404", description = "User not found")
    })
    @PutMapping("/global")
    public ResponseEntity<GlobalPreferencesResponse> updateGlobalPreferences(
            @Valid @RequestBody UpdateGlobalPreferencesRequest request,
            Authentication authentication) {
        
        log.info("Global preferences update request");
        
        UUID userId = getUserIdFromAuthentication(authentication);
        GlobalPreferencesResponse response = userPreferencesService.updateGlobalPreferences(userId, request);
        return ResponseEntity.ok(response);
    }

    @Operation(
            summary = "Get persona-specific preferences",
            description = "Get preferences for a specific persona"
    )
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Persona preferences retrieved successfully"),
            @ApiResponse(responseCode = "401", description = "Not authenticated"),
            @ApiResponse(responseCode = "404", description = "Persona not found")
    })
    @GetMapping("/personas/{personaId}")
    public ResponseEntity<PersonaPreferencesResponse> getPersonaPreferences(
            @Parameter(description = "Persona ID") @PathVariable UUID personaId,
            Authentication authentication) {
        
        log.debug("Persona preferences request for persona: {}", personaId);
        
        UUID userId = getUserIdFromAuthentication(authentication);
        PersonaPreferencesResponse response = userPreferencesService.getPersonaPreferences(userId, personaId);
        return ResponseEntity.ok(response);
    }

    @Operation(
            summary = "Update persona-specific preferences",
            description = "Update preferences for a specific persona"
    )
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Persona preferences updated successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid preferences data"),
            @ApiResponse(responseCode = "401", description = "Not authenticated"),
            @ApiResponse(responseCode = "404", description = "Persona not found")
    })
    @PutMapping("/personas/{personaId}")
    public ResponseEntity<PersonaPreferencesResponse> updatePersonaPreferences(
            @Parameter(description = "Persona ID") @PathVariable UUID personaId,
            @Valid @RequestBody UpdatePersonaPreferencesRequest request,
            Authentication authentication) {
        
        log.info("Persona preferences update request for persona: {}", personaId);
        
        UUID userId = getUserIdFromAuthentication(authentication);
        PersonaPreferencesResponse response = userPreferencesService.updatePersonaPreferences(userId, personaId, request);
        return ResponseEntity.ok(response);
    }

    @Operation(
            summary = "Get active persona preferences",
            description = "Get preferences for the currently active persona"
    )
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Active persona preferences retrieved successfully"),
            @ApiResponse(responseCode = "401", description = "Not authenticated"),
            @ApiResponse(responseCode = "404", description = "No active persona found")
    })
    @GetMapping("/active")
    public ResponseEntity<PersonaPreferencesResponse> getActivePersonaPreferences(Authentication authentication) {
        log.debug("Active persona preferences request");
        
        UUID userId = getUserIdFromAuthentication(authentication);
        PersonaPreferencesResponse response = userPreferencesService.getActivePersonaPreferences(userId);
        return ResponseEntity.ok(response);
    }

    @Operation(
            summary = "Get notification preferences",
            description = "Get detailed notification preferences for all channels and persona contexts"
    )
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Notification preferences retrieved successfully"),
            @ApiResponse(responseCode = "401", description = "Not authenticated")
    })
    @GetMapping("/notifications")
    public ResponseEntity<NotificationPreferencesResponse> getNotificationPreferences(Authentication authentication) {
        log.debug("Notification preferences request");
        
        UUID userId = getUserIdFromAuthentication(authentication);
        NotificationPreferencesResponse response = userPreferencesService.getNotificationPreferences(userId);
        return ResponseEntity.ok(response);
    }

    @Operation(
            summary = "Update notification preferences",
            description = "Update notification preferences for specific channels and contexts"
    )
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Notification preferences updated successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid notification preferences"),
            @ApiResponse(responseCode = "401", description = "Not authenticated")
    })
    @PutMapping("/notifications")
    public ResponseEntity<NotificationPreferencesResponse> updateNotificationPreferences(
            @Valid @RequestBody UpdateNotificationPreferencesRequest request,
            Authentication authentication) {
        
        log.info("Notification preferences update request");
        
        UUID userId = getUserIdFromAuthentication(authentication);
        NotificationPreferencesResponse response = userPreferencesService.updateNotificationPreferences(userId, request);
        return ResponseEntity.ok(response);
    }

    @Operation(
            summary = "Get accessibility preferences",
            description = "Get accessibility preferences for the user"
    )
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Accessibility preferences retrieved successfully"),
            @ApiResponse(responseCode = "401", description = "Not authenticated")
    })
    @GetMapping("/accessibility")
    public ResponseEntity<AccessibilityPreferencesResponse> getAccessibilityPreferences(Authentication authentication) {
        log.debug("Accessibility preferences request");
        
        UUID userId = getUserIdFromAuthentication(authentication);
        AccessibilityPreferencesResponse response = userPreferencesService.getAccessibilityPreferences(userId);
        return ResponseEntity.ok(response);
    }

    @Operation(
            summary = "Update accessibility preferences",
            description = "Update accessibility preferences for the user"
    )
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Accessibility preferences updated successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid accessibility preferences"),
            @ApiResponse(responseCode = "401", description = "Not authenticated")
    })
    @PutMapping("/accessibility")
    public ResponseEntity<AccessibilityPreferencesResponse> updateAccessibilityPreferences(
            @Valid @RequestBody UpdateAccessibilityPreferencesRequest request,
            Authentication authentication) {
        
        log.info("Accessibility preferences update request");
        
        UUID userId = getUserIdFromAuthentication(authentication);
        AccessibilityPreferencesResponse response = userPreferencesService.updateAccessibilityPreferences(userId, request);
        return ResponseEntity.ok(response);
    }

    @Operation(
            summary = "Get theme preferences",
            description = "Get theme and appearance preferences for the user and personas"
    )
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Theme preferences retrieved successfully"),
            @ApiResponse(responseCode = "401", description = "Not authenticated")
    })
    @GetMapping("/theme")
    public ResponseEntity<ThemePreferencesResponse> getThemePreferences(Authentication authentication) {
        log.debug("Theme preferences request");
        
        UUID userId = getUserIdFromAuthentication(authentication);
        ThemePreferencesResponse response = userPreferencesService.getThemePreferences(userId);
        return ResponseEntity.ok(response);
    }

    @Operation(
            summary = "Update theme preferences",
            description = "Update theme and appearance preferences"
    )
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Theme preferences updated successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid theme preferences"),
            @ApiResponse(responseCode = "401", description = "Not authenticated")
    })
    @PutMapping("/theme")
    public ResponseEntity<ThemePreferencesResponse> updateThemePreferences(
            @Valid @RequestBody UpdateThemePreferencesRequest request,
            Authentication authentication) {
        
        log.info("Theme preferences update request");
        
        UUID userId = getUserIdFromAuthentication(authentication);
        ThemePreferencesResponse response = userPreferencesService.updateThemePreferences(userId, request);
        return ResponseEntity.ok(response);
    }

    @Operation(
            summary = "Get integration preferences",
            description = "Get preferences for external service integrations"
    )
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Integration preferences retrieved successfully"),
            @ApiResponse(responseCode = "401", description = "Not authenticated")
    })
    @GetMapping("/integrations")
    public ResponseEntity<IntegrationPreferencesResponse> getIntegrationPreferences(Authentication authentication) {
        log.debug("Integration preferences request");
        
        UUID userId = getUserIdFromAuthentication(authentication);
        IntegrationPreferencesResponse response = userPreferencesService.getIntegrationPreferences(userId);
        return ResponseEntity.ok(response);
    }

    @Operation(
            summary = "Update integration preferences",
            description = "Update preferences for external service integrations"
    )
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Integration preferences updated successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid integration preferences"),
            @ApiResponse(responseCode = "401", description = "Not authenticated")
    })
    @PutMapping("/integrations")
    public ResponseEntity<IntegrationPreferencesResponse> updateIntegrationPreferences(
            @Valid @RequestBody UpdateIntegrationPreferencesRequest request,
            Authentication authentication) {
        
        log.info("Integration preferences update request");
        
        UUID userId = getUserIdFromAuthentication(authentication);
        IntegrationPreferencesResponse response = userPreferencesService.updateIntegrationPreferences(userId, request);
        return ResponseEntity.ok(response);
    }

    @Operation(
            summary = "Get preference schema",
            description = "Get the schema definition for available preferences and their validation rules"
    )
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Preference schema retrieved successfully")
    })
    @GetMapping("/schema")
    public ResponseEntity<PreferenceSchemaResponse> getPreferenceSchema() {
        log.debug("Preference schema request");
        
        PreferenceSchemaResponse response = userPreferencesService.getPreferenceSchema();
        return ResponseEntity.ok(response);
    }

    @Operation(
            summary = "Reset preferences to defaults",
            description = "Reset specific preference categories to their default values"
    )
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Preferences reset successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid reset request"),
            @ApiResponse(responseCode = "401", description = "Not authenticated")
    })
    @PostMapping("/reset")
    public ResponseEntity<MessageResponse> resetPreferences(
            @Valid @RequestBody ResetPreferencesRequest request,
            Authentication authentication) {
        
        log.info("Preferences reset request for categories: {}", request.getCategories());
        
        UUID userId = getUserIdFromAuthentication(authentication);
        userPreferencesService.resetPreferences(userId, request);
        return ResponseEntity.ok(new MessageResponse("Preferences reset successfully"));
    }

    @Operation(
            summary = "Copy preferences between personas",
            description = "Copy preferences from one persona to another"
    )
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Preferences copied successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid copy request"),
            @ApiResponse(responseCode = "401", description = "Not authenticated"),
            @ApiResponse(responseCode = "404", description = "Source or target persona not found")
    })
    @PostMapping("/copy")
    public ResponseEntity<MessageResponse> copyPreferencesBetweenPersonas(
            @Valid @RequestBody CopyPreferencesRequest request,
            Authentication authentication) {
        
        log.info("Preferences copy request from {} to {}", request.getSourcePersonaId(), request.getTargetPersonaId());
        
        UUID userId = getUserIdFromAuthentication(authentication);
        userPreferencesService.copyPreferencesBetweenPersonas(userId, request);
        return ResponseEntity.ok(new MessageResponse("Preferences copied successfully"));
    }

    @Operation(
            summary = "Export user preferences",
            description = "Export all user preferences in a portable format"
    )
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Preferences exported successfully"),
            @ApiResponse(responseCode = "401", description = "Not authenticated")
    })
    @PostMapping("/export")
    public ResponseEntity<PreferencesExportResponse> exportPreferences(
            @Valid @RequestBody PreferencesExportRequest request,
            Authentication authentication) {
        
        log.info("Preferences export request");
        
        UUID userId = getUserIdFromAuthentication(authentication);
        PreferencesExportResponse response = userPreferencesService.exportPreferences(userId, request);
        return ResponseEntity.ok(response);
    }

    @Operation(
            summary = "Import user preferences",
            description = "Import user preferences from a previously exported format"
    )
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Preferences imported successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid import data"),
            @ApiResponse(responseCode = "401", description = "Not authenticated")
    })
    @PostMapping("/import")
    public ResponseEntity<PreferencesImportResponse> importPreferences(
            @Valid @RequestBody PreferencesImportRequest request,
            Authentication authentication) {
        
        log.info("Preferences import request");
        
        UUID userId = getUserIdFromAuthentication(authentication);
        PreferencesImportResponse response = userPreferencesService.importPreferences(userId, request);
        return ResponseEntity.ok(response);
    }

    private UUID getUserIdFromAuthentication(Authentication authentication) {
        try {
            return UUID.fromString(authentication.getName());
        } catch (IllegalArgumentException e) {
            throw new IllegalStateException("Invalid user authentication", e);
        }
    }
}