openapi: 3.0.3
info:
  title: FocusHive Identity Service API
  description: |
    Comprehensive Identity and Authentication Service for FocusHive Platform
    
    This service implements the CM3035 Advanced Web Design template requirements including:
    - JWT-based secure authentication system
    - Multiple user personas/profiles for different contexts (work/study/personal)
    - OAuth2 authorization server capabilities (not just consumer)
    - Advanced privacy controls and GDPR compliance
    - Context-based identity switching
    - Cross-service identity federation
    - Comprehensive user preferences management
    
    ## Authentication
    
    This API supports multiple authentication methods:
    - JWT Bearer tokens for API access
    - OAuth2 authorization flows for third-party applications
    - Basic authentication for client credentials
    
    ## Personas and Context Switching
    
    Users can have multiple personas representing different contexts:
    - **Work Profile**: Professional identity with work-related preferences
    - **Study Profile**: Academic identity with learning-focused settings
    - **Personal Profile**: Personal identity with social preferences
    - **Custom Profiles**: User-defined personas for specific contexts
    
    ## Privacy and GDPR Compliance
    
    Full GDPR compliance with:
    - Right to Access (Article 15)
    - Right to Rectification (Article 16) 
    - Right to Erasure (Article 17)
    - Right to Data Portability (Article 20)
    - Right to Object (Article 21)
    - Consent management and audit trails
    
  version: 1.0.0
  contact:
    name: FocusHive Identity Service
    email: identity@focushive.com
    url: https://docs.focushive.com/identity-service
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://identity.focushive.com/api/v1
    description: Production server
  - url: https://identity-staging.focushive.com/api/v1
    description: Staging server
  - url: http://localhost:8081/api/v1
    description: Local development server

security:
  - JWT: []
  - OAuth2: []

tags:
  - name: Authentication
    description: User authentication and identity management
  - name: Persona Management
    description: Multiple personas and context switching
  - name: OAuth2 Authorization Server
    description: OAuth2 authorization server capabilities
  - name: Privacy & Data Management
    description: GDPR-compliant privacy controls and data management
  - name: Identity Federation & SSO
    description: Cross-service identity federation and single sign-on
  - name: User Preferences
    description: User preferences and settings management
  - name: Health & Monitoring
    description: Service health and monitoring endpoints

paths:
  # Authentication Endpoints
  /auth/register:
    post:
      tags: [Authentication]
      summary: Register a new user
      description: Creates a new user account with a default persona
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags: [Authentication]
      summary: Login user
      description: Authenticates user and returns JWT tokens
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successfully authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      tags: [Authentication]
      summary: Refresh access token
      description: Returns a new access token using a valid refresh token
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token successfully refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags: [Authentication]
      summary: Logout user
      description: Invalidates the user's current session and tokens
      operationId: logoutUser
      security:
        - JWT: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogoutRequest'
      responses:
        '200':
          description: Successfully logged out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Persona Management Endpoints
  /personas:
    get:
      tags: [Persona Management]
      summary: Get all personas for user
      description: Retrieve all personas for the authenticated user, ordered by priority
      operationId: getUserPersonas
      security:
        - JWT: []
      responses:
        '200':
          description: Personas retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PersonaDto'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags: [Persona Management]
      summary: Create a new persona
      description: Create a new persona for the authenticated user
      operationId: createPersona
      security:
        - JWT: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonaDto'
      responses:
        '201':
          description: Persona created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonaDto'
        '400':
          description: Invalid persona data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /personas/active:
    get:
      tags: [Persona Management]
      summary: Get active persona
      description: Get the currently active persona for the authenticated user
      operationId: getActivePersona
      security:
        - JWT: []
      responses:
        '200':
          description: Active persona retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonaDto'
        '204':
          description: No active persona found
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /personas/{personaId}/switch:
    post:
      tags: [Persona Management]
      summary: Switch persona context
      description: Switch to a different persona for the authenticated user
      operationId: switchPersona
      security:
        - JWT: []
      parameters:
        - name: personaId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Persona ID to switch to
      responses:
        '200':
          description: Persona switched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonaDto'
        '404':
          description: Persona not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # OAuth2 Authorization Server Endpoints
  /oauth2/authorize:
    get:
      tags: [OAuth2 Authorization Server]
      summary: Authorization endpoint
      description: OAuth2 authorization code flow initiation endpoint
      operationId: authorizeOAuth2
      parameters:
        - name: client_id
          in: query
          required: true
          schema:
            type: string
          description: OAuth2 client ID
        - name: response_type
          in: query
          required: true
          schema:
            type: string
            enum: [code]
          description: Response type (must be 'code')
        - name: redirect_uri
          in: query
          required: true
          schema:
            type: string
            format: uri
          description: Redirect URI
        - name: scope
          in: query
          required: false
          schema:
            type: string
          description: Space-separated scopes
        - name: state
          in: query
          required: false
          schema:
            type: string
          description: State parameter for CSRF protection
      responses:
        '302':
          description: Redirect to login or callback with authorization code
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /oauth2/token:
    post:
      tags: [OAuth2 Authorization Server]
      summary: Token endpoint
      description: OAuth2 token endpoint for exchanging authorization codes for access tokens
      operationId: tokenOAuth2
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - grant_type
              properties:
                grant_type:
                  type: string
                  enum: [authorization_code, refresh_token, client_credentials]
                  description: Grant type
                code:
                  type: string
                  description: Authorization code (for authorization_code grant)
                redirect_uri:
                  type: string
                  format: uri
                  description: Redirect URI (for authorization_code grant)
                refresh_token:
                  type: string
                  description: Refresh token (for refresh_token grant)
                scope:
                  type: string
                  description: Scope (for client_credentials grant)
      responses:
        '200':
          description: Access token issued successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2TokenResponse'
        '400':
          description: Invalid request or grant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /oauth2/userinfo:
    get:
      tags: [OAuth2 Authorization Server]
      summary: User info endpoint
      description: OAuth2 user info endpoint for retrieving user information
      operationId: userInfoOAuth2
      security:
        - OAuth2: []
      responses:
        '200':
          description: User information returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2UserInfoResponse'
        '401':
          description: Invalid or expired access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Privacy & Data Management Endpoints
  /privacy/preferences:
    get:
      tags: [Privacy & Data Management]
      summary: Get privacy preferences
      description: Retrieve the user's current privacy preferences and consent status
      operationId: getPrivacyPreferences
      security:
        - JWT: []
      responses:
        '200':
          description: Privacy preferences retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivacyPreferencesResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags: [Privacy & Data Management]
      summary: Update privacy preferences
      description: Update the user's privacy preferences and consent settings
      operationId: updatePrivacyPreferences
      security:
        - JWT: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePrivacyPreferencesRequest'
      responses:
        '200':
          description: Privacy preferences updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivacyPreferencesResponse'
        '400':
          description: Invalid preferences data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /privacy/data/export:
    post:
      tags: [Privacy & Data Management]
      summary: Export user data
      description: Export all user data in a portable format (GDPR Article 20)
      operationId: requestDataExport
      security:
        - JWT: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataExportRequest'
      responses:
        '200':
          description: Data export initiated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataExportResponse'
        '400':
          description: Invalid export request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Health Check
  /health:
    get:
      tags: [Health & Monitoring]
      summary: Health check endpoint
      description: Check the health status of the Identity Service
      operationId: healthCheck
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: UP
                  timestamp:
                    type: string
                    format: date-time
                  version:
                    type: string
                    example: "1.0.0"

components:
  securitySchemes:
    JWT:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Bearer token authentication
    OAuth2:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: OAuth2 access token authentication

  schemas:
    # Authentication Schemas
    RegisterRequest:
      type: object
      required:
        - username
        - email
        - password
        - displayName
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: '^[a-zA-Z0-9_-]+$'
          example: "john.doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        password:
          type: string
          minLength: 8
          example: "SecurePassword123!"
        displayName:
          type: string
          minLength: 1
          maxLength: 100
          example: "John Doe"
        preferredLanguage:
          type: string
          example: "en"
          default: "en"
        timezone:
          type: string
          example: "America/New_York"
          default: "UTC"

    LoginRequest:
      type: object
      required:
        - usernameOrEmail
        - password
      properties:
        usernameOrEmail:
          type: string
          example: "john.doe"
        password:
          type: string
          example: "SecurePassword123!"
        rememberMe:
          type: boolean
          default: false
          example: true

    AuthenticationResponse:
      type: object
      properties:
        accessToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refreshToken:
          type: string
          example: "def456..."
        tokenType:
          type: string
          example: "Bearer"
          default: "Bearer"
        expiresIn:
          type: integer
          example: 3600
        user:
          $ref: '#/components/schemas/UserDTO'
        activePersona:
          $ref: '#/components/schemas/PersonaDto'

    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          example: "def456..."

    LogoutRequest:
      type: object
      properties:
        logoutFromAllDevices:
          type: boolean
          default: false
          example: false

    MessageResponse:
      type: object
      properties:
        message:
          type: string
          example: "Operation completed successfully"

    # User and Persona Schemas
    UserDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        username:
          type: string
          example: "john.doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        displayName:
          type: string
          example: "John Doe"
        emailVerified:
          type: boolean
          example: true
        twoFactorEnabled:
          type: boolean
          example: false
        preferredLanguage:
          type: string
          example: "en"
        timezone:
          type: string
          example: "America/New_York"
        createdAt:
          type: string
          format: date-time
        lastLoginAt:
          type: string
          format: date-time

    PersonaDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "persona-550e8400-e29b-41d4-a716-446655440000"
        name:
          type: string
          example: "Work Profile"
          minLength: 1
          maxLength: 100
        description:
          type: string
          example: "Professional work identity"
        type:
          type: string
          enum: [WORK, STUDY, PERSONAL, CUSTOM]
          example: "WORK"
        isDefault:
          type: boolean
          example: false
        isActive:
          type: boolean
          example: true
        preferences:
          type: object
          additionalProperties: true
          example:
            theme: "dark"
            notifications: true
            privacy_level: "medium"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    # OAuth2 Schemas
    OAuth2TokenResponse:
      type: object
      properties:
        access_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        token_type:
          type: string
          example: "Bearer"
          default: "Bearer"
        expires_in:
          type: integer
          example: 3600
        refresh_token:
          type: string
          example: "def456..."
        scope:
          type: string
          example: "openid profile email"
        id_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    OAuth2UserInfoResponse:
      type: object
      properties:
        sub:
          type: string
          example: "550e8400-e29b-41d4-a716-446655440000"
        name:
          type: string
          example: "John Doe"
        preferred_username:
          type: string
          example: "john.doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        email_verified:
          type: boolean
          example: true
        persona_id:
          type: string
          example: "persona-123-456"
        persona_name:
          type: string
          example: "Work Profile"

    # Privacy Schemas
    PrivacyPreferencesResponse:
      type: object
      properties:
        consentStatus:
          type: object
          additionalProperties:
            type: boolean
          example:
            analytics: true
            marketing: false
            third_party_sharing: false
        dataSharingPreferences:
          type: object
          additionalProperties:
            type: string
          example:
            profile_visibility: "private"
            activity_sharing: "friends"
        marketingCommunicationConsent:
          type: boolean
          example: false
        analyticsConsent:
          type: boolean
          example: true
        thirdPartyDataSharingConsent:
          type: boolean
          example: false
        accountVisibility:
          type: string
          enum: [public, private, friends]
          example: "private"
        dataRetentionDays:
          type: integer
          minimum: 30
          maximum: 2555
          example: 730
        updatedAt:
          type: string
          format: date-time

    UpdatePrivacyPreferencesRequest:
      type: object
      properties:
        consentStatus:
          type: object
          additionalProperties:
            type: boolean
        dataSharingPreferences:
          type: object
          additionalProperties:
            type: string
        marketingCommunicationConsent:
          type: boolean
        analyticsConsent:
          type: boolean
        thirdPartyDataSharingConsent:
          type: boolean
        accountVisibility:
          type: string
          enum: [public, private, friends]
        dataRetentionDays:
          type: integer
          minimum: 30
          maximum: 2555

    DataExportRequest:
      type: object
      required:
        - dataCategories
      properties:
        dataCategories:
          type: array
          items:
            type: string
            enum: [profile, personas, preferences, activity, connections, messages]
          minItems: 1
          example: ["profile", "personas", "preferences"]
        format:
          type: string
          enum: [json, xml, csv]
          default: "json"
          example: "json"
        includeDeleted:
          type: boolean
          default: false
          example: false
        dateFrom:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        dateTo:
          type: string
          format: date-time
          example: "2023-12-31T23:59:59Z"

    DataExportResponse:
      type: object
      properties:
        exportId:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        status:
          type: string
          enum: [requested, processing, completed, failed, expired]
          example: "processing"
        progress:
          type: integer
          minimum: 0
          maximum: 100
          example: 45
        downloadUrl:
          type: string
          format: uri
          example: "https://identity.focushive.com/api/v1/privacy/data/export/550e8400-e29b-41d4-a716-446655440000/download"
        fileSizeBytes:
          type: integer
          format: int64
          example: 1048576
        requestedAt:
          type: string
          format: date-time
        estimatedCompletion:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time

    # Error Response
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "invalid_request"
        error_description:
          type: string
          example: "The request is missing a required parameter"
        timestamp:
          type: string
          format: date-time
        path:
          type: string
          example: "/api/v1/auth/login"
        status:
          type: integer
          example: 400