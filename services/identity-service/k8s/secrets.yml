# ===============================================================================
# SECRETS TEMPLATE - IDENTITY SERVICE
# ===============================================================================
# This file contains templates for Kubernetes secrets.
# NEVER commit actual secret values to version control!
# Use tools like Sealed Secrets, External Secrets Operator, or Vault for production.
# ===============================================================================

apiVersion: v1
kind: Secret
metadata:
  name: identity-service-secrets
  namespace: focushive
  labels:
    app: identity-service
    version: v1
    tier: backend
    component: authentication
type: Opaque
data:
  # Database Credentials (base64 encoded)
  # Replace these with actual values before deployment
  db-host: <BASE64_ENCODED_DB_HOST>  # e.g., postgres.focushive.com
  db-name: <BASE64_ENCODED_DB_NAME>  # e.g., identity_production
  db-username: <BASE64_ENCODED_DB_USERNAME>  # e.g., identity_app_user
  db-password: <BASE64_ENCODED_DB_PASSWORD>  # Strong database password
  
  # Redis Credentials
  redis-password: <BASE64_ENCODED_REDIS_PASSWORD>  # Strong Redis password
  
  # JWT Secrets
  jwt-keystore-password: <BASE64_ENCODED_JWT_KEYSTORE_PASSWORD>  # Strong keystore password
  jwt-private-key-password: <BASE64_ENCODED_JWT_PRIVATE_KEY_PASSWORD>  # Strong private key password
  
  # OAuth2 Client Secrets
  frontend-client-id: <BASE64_ENCODED_FRONTEND_CLIENT_ID>  # e.g., focushive-frontend-prod
  frontend-client-secret: <BASE64_ENCODED_FRONTEND_CLIENT_SECRET>  # Strong client secret
  backend-client-id: <BASE64_ENCODED_BACKEND_CLIENT_ID>  # e.g., focushive-backend-prod
  backend-client-secret: <BASE64_ENCODED_BACKEND_CLIENT_SECRET>  # Strong client secret
  
  # OAuth2 Redirect URIs (JSON encoded)
  frontend-redirect-uris: <BASE64_ENCODED_FRONTEND_REDIRECT_URIS>  # e.g., ["https://app.focushive.com/auth/callback"]
  backend-redirect-uris: <BASE64_ENCODED_BACKEND_REDIRECT_URIS>  # e.g., ["https://api.focushive.com/auth/callback"]
  
  # SMTP Credentials
  smtp-username: <BASE64_ENCODED_SMTP_USERNAME>  # SMTP username
  smtp-password: <BASE64_ENCODED_SMTP_PASSWORD>  # SMTP password
  
  # Remember Me Secret
  remember-me-key: <BASE64_ENCODED_REMEMBER_ME_KEY>  # Strong secret for remember-me functionality

---
# SSL/TLS Certificates Secret
apiVersion: v1
kind: Secret
metadata:
  name: identity-service-ssl-certs
  namespace: focushive
  labels:
    app: identity-service
    version: v1
    tier: backend
    component: authentication
type: kubernetes.io/tls
data:
  # Public certificates (base64 encoded)
  tls.crt: <BASE64_ENCODED_TLS_CERTIFICATE>  # Public certificate
  ca.crt: <BASE64_ENCODED_CA_CERTIFICATE>   # CA certificate
  jwt-public-key.pem: <BASE64_ENCODED_JWT_PUBLIC_KEY>  # JWT public key

---
# SSL/TLS Private Keys Secret
apiVersion: v1
kind: Secret
metadata:
  name: identity-service-ssl-private
  namespace: focushive
  labels:
    app: identity-service
    version: v1
    tier: backend
    component: authentication
type: Opaque
data:
  # Private keys (base64 encoded)
  tls.key: <BASE64_ENCODED_TLS_PRIVATE_KEY>  # TLS private key
  jwt-private-key.pem: <BASE64_ENCODED_JWT_PRIVATE_KEY>  # JWT private key
  identity-keystore.p12: <BASE64_ENCODED_JWT_KEYSTORE>  # JWT keystore

---
# Database SSL Client Certificates
apiVersion: v1
kind: Secret
metadata:
  name: identity-service-db-ssl
  namespace: focushive
  labels:
    app: identity-service
    version: v1
    tier: backend
    component: authentication
type: Opaque
data:
  # Database SSL certificates (base64 encoded)
  client-cert.pem: <BASE64_ENCODED_DB_CLIENT_CERT>  # Database client certificate
  client-key.pem: <BASE64_ENCODED_DB_CLIENT_KEY>   # Database client private key
  ca-cert.pem: <BASE64_ENCODED_DB_CA_CERT>         # Database CA certificate

---
# ===============================================================================
# SECRET GENERATION COMMANDS
# ===============================================================================
# Use these commands to generate base64 encoded values for the secrets above:
#
# 1. Database credentials:
#    echo -n "your-db-host" | base64
#    echo -n "your-db-name" | base64
#    echo -n "your-db-username" | base64
#    echo -n "your-db-password" | base64
#
# 2. Redis password:
#    openssl rand -base64 32 | tr -d '\n' | base64
#
# 3. JWT keystore password:
#    openssl rand -base64 32 | tr -d '\n' | base64
#
# 4. JWT private key password:
#    openssl rand -base64 32 | tr -d '\n' | base64
#
# 5. OAuth2 client secrets:
#    openssl rand -base64 64 | tr -d '\n' | base64
#
# 6. SMTP credentials:
#    echo -n "your-smtp-username" | base64
#    echo -n "your-smtp-password" | base64
#
# 7. Remember me key:
#    openssl rand -base64 64 | tr -d '\n' | base64
#
# 8. Generate JWT key pair:
#    # Generate private key
#    openssl genpkey -algorithm RSA -pkcs8 -out jwt-private-key.pem -pkcs8 -aes256
#    # Generate public key
#    openssl pkey -in jwt-private-key.pem -pubout -out jwt-public-key.pem
#    # Encode for Kubernetes
#    cat jwt-private-key.pem | base64 -w 0
#    cat jwt-public-key.pem | base64 -w 0
#
# 9. Generate TLS certificates:
#    # For development/testing (use proper CA-signed certificates in production)
#    openssl req -x509 -newkey rsa:4096 -keyout tls.key -out tls.crt -days 365 -nodes
#    cat tls.crt | base64 -w 0
#    cat tls.key | base64 -w 0
#
# ===============================================================================
# SECURITY BEST PRACTICES
# ===============================================================================
#
# 1. NEVER commit actual secret values to version control
# 2. Use separate secret management tools in production:
#    - HashiCorp Vault
#    - AWS Secrets Manager
#    - Azure Key Vault
#    - Google Secret Manager
#    - Sealed Secrets
#    - External Secrets Operator
#
# 3. Rotate secrets regularly:
#    - Database passwords: Every 90 days
#    - JWT keys: Every 180 days
#    - OAuth2 client secrets: Every 365 days
#    - TLS certificates: Before expiration
#
# 4. Use strong passwords and keys:
#    - Minimum 32 characters for passwords
#    - RSA 2048-bit minimum for keys (4096-bit recommended)
#    - Use cryptographically secure random generation
#
# 5. Implement secret scanning:
#    - Use git hooks to prevent secret commits
#    - Implement automated secret scanning in CI/CD
#    - Monitor for exposed secrets in logs and repositories
#
# ===============================================================================
# EXAMPLE DEPLOYMENT SCRIPT
# ===============================================================================
#
# #!/bin/bash
# # deploy-secrets.sh - Deploy secrets to Kubernetes
#
# # Set your environment
# NAMESPACE="focushive"
# ENVIRONMENT="production"
#
# # Generate strong passwords
# DB_PASSWORD=$(openssl rand -base64 32)
# REDIS_PASSWORD=$(openssl rand -base64 32)
# JWT_KEYSTORE_PASSWORD=$(openssl rand -base64 32)
# JWT_PRIVATE_KEY_PASSWORD=$(openssl rand -base64 32)
# FRONTEND_CLIENT_SECRET=$(openssl rand -base64 64)
# BACKEND_CLIENT_SECRET=$(openssl rand -base64 64)
# REMEMBER_ME_KEY=$(openssl rand -base64 64)
#
# # Create secret from command line (recommended approach)
# kubectl create secret generic identity-service-secrets \
#   --namespace=$NAMESPACE \
#   --from-literal=db-host="your-db-host" \
#   --from-literal=db-name="identity_production" \
#   --from-literal=db-username="identity_app_user" \
#   --from-literal=db-password="$DB_PASSWORD" \
#   --from-literal=redis-password="$REDIS_PASSWORD" \
#   --from-literal=jwt-keystore-password="$JWT_KEYSTORE_PASSWORD" \
#   --from-literal=jwt-private-key-password="$JWT_PRIVATE_KEY_PASSWORD" \
#   --from-literal=frontend-client-id="focushive-frontend-prod" \
#   --from-literal=frontend-client-secret="$FRONTEND_CLIENT_SECRET" \
#   --from-literal=backend-client-id="focushive-backend-prod" \
#   --from-literal=backend-client-secret="$BACKEND_CLIENT_SECRET" \
#   --from-literal=frontend-redirect-uris='["https://app.focushive.com/auth/callback"]' \
#   --from-literal=backend-redirect-uris='["https://api.focushive.com/auth/callback"]' \
#   --from-literal=smtp-username="your-smtp-username" \
#   --from-literal=smtp-password="your-smtp-password" \
#   --from-literal=remember-me-key="$REMEMBER_ME_KEY"
#
# # Store passwords securely for record keeping
# echo "Database password: $DB_PASSWORD" | vault write secret/identity-service/db-password -
# echo "Redis password: $REDIS_PASSWORD" | vault write secret/identity-service/redis-password -
#
# echo "Secrets deployed successfully!"
# ===============================================================================