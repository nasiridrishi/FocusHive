spring:
  application:
    name: identity-service
  
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:identity_db}
    username: ${DB_USER:identity_user}
    password: ${DB_PASSWORD:identity_pass}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
  
  jpa:
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: ${FORMAT_SQL:false}
        use_sql_comments: ${USE_SQL_COMMENTS:false}
        jdbc:
          batch_size: 25
          batch_versioned_data: true
        order_inserts: true
        order_updates: true
        # Performance optimization for N+1 query prevention
        default_batch_fetch_size: 16
        enable_lazy_load_no_trans: false
        query:
          in_clause_parameter_padding: true
    show-sql: false
  
  flyway:
    enabled: true
    baseline-on-migrate: true
    locations: classpath:db/migration
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:identity_db}
    user: ${DB_USER:identity_user}
    password: ${DB_PASSWORD:identity_pass}
  
  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6380}
    password: ${REDIS_PASSWORD}  # REQUIRED: Must be set in environment
    timeout: 2000ms
    lettuce:
      pool:
        max-active: 10
        max-idle: 8
        min-idle: 0
  
  cache:
    type: redis
    redis:
      time-to-live: 3600000 # 1 hour
      cache-null-values: false
  
  security:
    oauth2:
      authorizationserver:
        issuer: ${ISSUER_URI:http://localhost:8081}

server:
  port: 8081
  servlet:
    context-path: /
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/xml,text/plain

# JWT Configuration
jwt:
  secret: ${JWT_SECRET}  # REQUIRED: Must be set in environment
  access-token-expiration-ms: ${JWT_ACCESS_TOKEN_EXPIRATION:3600000} # 1 hour
  refresh-token-expiration-ms: ${JWT_REFRESH_TOKEN_EXPIRATION:2592000000} # 30 days
  remember-me-expiration-ms: ${JWT_REMEMBER_ME_EXPIRATION:7776000000} # 90 days
  issuer: identity-service

# Security Configuration
security:
  jwt:
    key-store: classpath:keystore.p12
    key-store-password: ${KEY_STORE_PASSWORD}  # REQUIRED: Must be set in environment
    key-alias: identity-service
    private-key-passphrase: ${PRIVATE_KEY_PASSWORD}  # REQUIRED: Must be set in environment
  cors:
    allowed-origins: ${CORS_ORIGINS:http://localhost:3000,http://localhost:5173}
    allowed-methods: GET,POST,PUT,DELETE,OPTIONS
    allowed-headers: "*"
    allow-credentials: true
    max-age: 3600

# OAuth2 Configuration
oauth2:
  authorization:
    consent-required: true
    device-code-time-to-live: PT5M
    access-token-time-to-live: PT15M
    refresh-token-time-to-live: P30D
    authorization-code-time-to-live: PT5M
    device-verification-uri: /oauth2/device/verify
  clients:
    focushive:
      client-id: focushive-backend
      client-secret: ${FOCUSHIVE_CLIENT_SECRET}  # REQUIRED: Must be set in environment
      redirect-uris:
        - http://localhost:8080/login/oauth2/code/identity
      scopes:
        - openid
        - profile
        - email
        - personas
        - identity.read
        - identity.write

# Application Configuration
app:
  base-url: ${APP_BASE_URL:http://localhost:3000}
  email:
    from: ${EMAIL_FROM:noreply@focushive.com}
    
# Actuator Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true
  tracing:
    sampling:
      probability: 1.0

# Logging Configuration
logging:
  level:
    com.focushive.identity: ${LOG_LEVEL:INFO}
    org.springframework.security: ${SECURITY_LOG_LEVEL:WARN}
    org.springframework.security.oauth2: ${OAUTH_LOG_LEVEL:WARN}
    org.hibernate.SQL: ${SQL_LOG_LEVEL:WARN}
    org.hibernate.type.descriptor.sql.BasicBinder: ${SQL_BINDER_LOG_LEVEL:WARN}
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# API Documentation
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    display-request-duration: true
    groups-order: DESC
    operations-sorter: method
    tags-sorter: alpha

# Circuit Breaker Configuration
resilience4j:
  circuitbreaker:
    instances:
      identity-service:
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 10s
        permitted-number-of-calls-in-half-open-state: 3
        automatic-transition-from-open-to-half-open-enabled: true