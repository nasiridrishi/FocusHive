# Backend-only Docker Compose for FocusHive - Testing Backend Services
version: '3.9'

services:
  # PostgreSQL Database
  db:
    image: postgres:16-alpine
    container_name: focushive-db
    environment:
      POSTGRES_DB: ${DB_NAME:-focushive}
      POSTGRES_USER: ${DB_USER:-focushive_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-focushive_pass}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - focushive-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-focushive_user} -d ${DB_NAME:-focushive}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Redis for caching and pub/sub
  redis:
    image: redis:7-alpine
    container_name: focushive-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-focushive_pass}
    volumes:
      - redis_data:/data
    networks:
      - focushive-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-focushive_pass}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    restart: unless-stopped

  # Identity Service Database
  identity-db:
    image: postgres:16-alpine
    container_name: identity-db
    environment:
      POSTGRES_DB: ${IDENTITY_DB_NAME:-identity_db}
      POSTGRES_USER: ${IDENTITY_DB_USER:-identity_user}
      POSTGRES_PASSWORD: ${IDENTITY_DB_PASSWORD:-identity_pass}
    volumes:
      - identity_db_data:/var/lib/postgresql/data
    networks:
      - focushive-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${IDENTITY_DB_USER:-identity_user} -d ${IDENTITY_DB_NAME:-identity_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Identity Service Redis
  identity-redis:
    image: redis:7-alpine
    container_name: identity-redis
    command: redis-server --requirepass ${IDENTITY_REDIS_PASSWORD:-identity_redis_pass}
    volumes:
      - identity_redis_data:/data
    networks:
      - focushive-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${IDENTITY_REDIS_PASSWORD:-identity_redis_pass}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    restart: unless-stopped

  # Identity Service (Spring Boot)
  identity-service:
    build:
      context: ./services/identity-service
      dockerfile: Dockerfile
    container_name: identity-service
    environment:
      # Database
      DB_HOST: identity-db
      DB_PORT: 5432
      DB_NAME: ${IDENTITY_DB_NAME:-identity_db}
      DB_USER: ${IDENTITY_DB_USER:-identity_user}
      DB_PASSWORD: ${IDENTITY_DB_PASSWORD:-identity_pass}
      # Redis
      REDIS_HOST: identity-redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${IDENTITY_REDIS_PASSWORD:-identity_redis_pass}
      # Security
      KEY_STORE_PASSWORD: ${KEY_STORE_PASSWORD:-changeme}
      PRIVATE_KEY_PASSWORD: ${PRIVATE_KEY_PASSWORD:-changeme}
      FOCUSHIVE_CLIENT_SECRET: ${FOCUSHIVE_CLIENT_SECRET:-secret}
      # CORS - Allow Cloudflare tunnel access
      CORS_ORIGINS: "*"
      # Application
      SERVER_PORT: 8081
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      SHOW_SQL: ${SHOW_SQL:-false}
    networks:
      - focushive-network
    depends_on:
      identity-db:
        condition: service_healthy
      identity-redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Spring Boot Backend
  backend:
    build:
      context: ./services/focushive-backend
      dockerfile: Dockerfile
    container_name: backend
    ports:
      - "8080:8080"  # Exposed for testing
    environment:
      # Database
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-focushive}
      DB_USER: ${DB_USER:-focushive_user}
      DB_PASSWORD: ${DB_PASSWORD:-focushive_pass}
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-focushive_pass}
      # Identity Service
      IDENTITY_SERVICE_URL: http://identity-service:8081
      # Application
      SERVER_PORT: 8080
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-86400000}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      SHOW_SQL: ${SHOW_SQL:-false}
      # CORS - Allow Cloudflare tunnel access
      CORS_ORIGINS: "*"
    networks:
      - focushive-network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      identity-service:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s

  # Simple nginx to serve existing frontend and proxy API calls
  nginx:
    image: nginx:1.25-alpine
    container_name: focushive-nginx
    volumes:
      - ./docker/nginx/simple.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - focushive-network
    depends_on:
      - backend
      - identity-service
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Cloudflare Tunnel - the only external access point
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: focushive-tunnel
    restart: unless-stopped
    command: tunnel --no-autoupdate run --token ${CLOUDFLARE_TUNNEL_TOKEN}
    environment:
      CLOUDFLARE_TUNNEL_TOKEN: ${CLOUDFLARE_TUNNEL_TOKEN}
    networks:
      - focushive-network
    depends_on:
      - nginx

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  identity_db_data:
    driver: local
  identity_redis_data:
    driver: local

networks:
  focushive-network:
    driver: bridge
    internal: false
